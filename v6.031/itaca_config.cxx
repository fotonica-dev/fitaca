// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "itaca_config.h"

int leer_configuracion() {
  // función para leer datos de configuración globales del sistema
  char record[150], *dato;	/* array to hold each "record" */ 
  FILE *fichero;                  /* pointer to input file */
  int caracter, i;
  
  /* open the file to read */
  fichero = fopen("/root/itaca/itaca.conf", "r");			
  
  if (fichero == NULL) {
  	printf("Error al abrir el fichero itaca.conf\n");
  	printf("SALIENDO DE LA APLICACIÓN\n");
  	exit(0);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL DE LÁSER */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del periodo del tren de pulsos utilizado para excitar el láser */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  PeriodoTrenPulsos = atoi(dato);
  
  if (debug){
  	printf("Dato %s PeriodoTrenPulsos %d\n", dato, PeriodoTrenPulsos);
  }
  
  /* Lee el valor del retardo de Láser On */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoLaserOn = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoLaserOn %d\n", dato, RetardoLaserOn);
  }
  
  /* Lee el valor del retardo de Láser Off */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoLaserOff = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoLaserOff %d\n", dato, RetardoLaserOff);
  }
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL DE SALTO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la velocidad de salto */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  VelocidadSalto = atoi(dato);
  
  if (debug){
  	printf("Dato %s VelocidadSalto %d\n", dato, VelocidadSalto);
  }
  
  /* Lee el valor del retardo de salto */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoSalto = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoSalto %d\n", dato, RetardoSalto);
  }
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: RETARDOS POLÍGONO Y MARCAJE */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del Retardo de polígono */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoPoligono = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoPoligono %d\n", dato, RetardoPoligono);
  }
  
  /* Lee el valor del Retardo de marcaje */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoMarcaje = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoMarcaje %d\n", dato, RetardoMarcaje);
  }
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: FICHERO CORRECCIÓN */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del factor de calibración del fichero de corrección */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  CalibracionCorreccion = atof(dato);
  
  if (debug){
  	printf("Dato %s CalibracionCorreccion %f\n", dato, CalibracionCorreccion);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: ORIENTACIÓN Y AVANCE */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la Orientación */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Orientacion = atoi(dato);
  
  if (debug){
  	printf("Dato %s Orientacion %d\n", dato, Orientacion);
  }
  
  /* Lee el valor del Avance */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Avance = atoi(dato);
  
  if (debug){
  	printf("Dato %s Avance %d\n", dato, Avance);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: MARCAJE DINÁMICO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la variable de estado que indica si el marcaje dinámico está o no activo */
  // 0 indica no activado, 1 indica activado con velocidad variable (usa encoder) y 2 es activado con velocidad constante
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  MarcajeDinamicoActivo = atoi(dato);
  
  if (debug){
  	printf("Dato %s MarcajeDinamicoActivo %d\n", dato, MarcajeDinamicoActivo);
  }
  
  /* Lee el valor de la calibración del encoder */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  CalibracionEncoder = atof(dato);
  
  if (debug){
  	printf("Dato %s CalibracionEncoder %f\n", dato, CalibracionEncoder);
  }
  
  /* Lee el valor de la velocidad de la lÂ´inea */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  VelocidadLinea = atof(dato);
  
  if (debug){
  	printf("Dato %s VelocidadLinea %f\n", dato, VelocidadLinea);
  }
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL GALVOS */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la tensión de alimentación del galvo que produce un desplazamiento máximo */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  VGalvoRef_MaximoBits = atof(dato);
  
  //VGalvoMax = VGalvoRef_MaximoBits * 1.01;
  
  if (debug){
  	printf("Dato %s VGalvoRef_MaximoBits %f\n", dato, VGalvoRef_MaximoBits);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL EXTRACTOR */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la tensión de alimentación del galvo que produce un desplazamiento máximo */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ExtractorActivado = atoi(dato);
  
  if (debug){
  	printf("Dato %s ExtractorActivado %d\n", dato, ExtractorActivado);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL DISPARO FOTOCÉLULA */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de disparo de la fotocélula */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ValorDisparo = atoi(dato);
  
  if (debug){
  	printf("Dato %s ValorDisparo %d\n", dato, ValorDisparo);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: PERIODO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del periodo en microsegundos */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  PERIODO_MICROSEGUNDOS = atoi(dato);
  
  if (debug){
  	printf("Dato %s PERIODO_MICROSEGUNDOS %d\n", dato, PERIODO_MICROSEGUNDOS);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: Servicio Técnico */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la variable de servicio técnico */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ServicioTecnico = atoi(dato);
  
  if (debug){
  	printf("Dato %s ServicioTecnico %d\n", dato, ServicioTecnico);
  }
  
  /* Lee la línea con un comentario: IDIOMA */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del idioma para el GUI */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Idioma = atoi(dato);
  
  if (Idioma < 0) {Idioma = 0;}
  if (Idioma > 2) {Idioma = 2;}
  
  if (debug){
  	printf("Dato %s Idioma %d\n", dato, Idioma);
  }
  
  /* Lee la línea con un comentario: SPOT */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del tamaño del spot */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Spot = atoi(dato);
  
  if (Spot == 0) {Spot = 150;}
  
  if (debug){
  	printf("Dato %s Spot %d\n", dato, Spot);
  }
  
  /* Lee la línea con un comentario: ACTIVACION GALVOS */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para activar los galvos */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ValorActivacionGalvos = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 0
  if ((ValorActivacionGalvos != 0)&&(ValorActivacionGalvos != 1)) {ValorActivacionGalvos = 0;}
  
  if (debug){
  	printf("Dato %s ValorActivacionGalvos %d\n", dato, ValorActivacionGalvos);
  }
  
  /* Lee la línea con un comentario: CONTROL PUERTO SERIE */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber si hay control por puerto serie */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  PuertoSerieActivo = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 0
  if ((PuertoSerieActivo != 0)&&(PuertoSerieActivo != 1)) {PuertoSerieActivo = 0;}
  
  if (debug){
  	printf("Dato %s PuertoSerieActivo %d\n", dato, PuertoSerieActivo);
  }
  
  /* Lee la línea con un comentario: CENTRADO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber si la marca inicial está centrada */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Centrado = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 0
  if ((Centrado != 0)&&(Centrado != 1)) {Centrado = 0;}
  
  if (debug){
  	printf("Dato %s Centrado %d\n", dato, Centrado);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: TIPO DE DISPARO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del tipo de disparo, para cargar en el GUI */
  fgets(record, sizeof(record), fichero);	/* Lee una línea */
  dato = strtok(record, "\t"); 		/* lee hasta el primer tabulador */
  TipoDisparo = atoi(dato);
  
  if (debug){
  	printf("Dato %s TipoDisparo %d\n", dato, TipoDisparo);
  }  
  
  /* Lee la línea con un comentario: RETARDO DE DISPARO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del retardo tras el disparo de la fotocélula */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  RetardoDisparo = atoi(dato);
  
  if (debug){
  	printf("Dato %s RetardoDisparo %d\n", dato, RetardoDisparo);
  }  
  
  /* Lee la línea con un comentario: MÍNIMO DE LECTURAS CONSECUTIVAS */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor del mínimo número de lecturas consecutivas del disparo de la fotocélula */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  MinimoLecturasConsecutivas = atoi(dato);
  
  if (debug){
  	printf("Dato %s MinimoLecturasConsecutivas %d\n", dato, MinimoLecturasConsecutivas);
  }  
  
  /* Lee la línea con un comentario: SEPARACIÓN ENTRE DISPAROS */
  fgets(record, sizeof(record), fichero);
    
  /* Lee el valor de la Separacion Entre Disparos */
  fgets(record, sizeof(record), fichero);	/* Lee una línea */
  dato = strtok(record, "\t"); 		/* lee hasta el primer tabulador */
  SeparacionEntreDisparos_mm = atoi(dato);
  
  if (debug){
  	printf("Dato %s SeparacionEntreDisparos_mm %d\n", dato, SeparacionEntreDisparos_mm);
  }    
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: REVERSO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber si se imprime en el reverso (en espejo) */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Reverso = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 0
  if ((Reverso != 0)&&(Reverso != 1)) {Reverso = 0;}
  
  if (debug){
  	printf("Dato %s Reverso %d\n", dato, Reverso);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: ESTRATEGIA DE MARCAJE */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber que estrategia de marcaje se sigue */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Estrategia = atoi(dato);
  
  // tiene que ser 0 (carácter), 1 (átomos) o 2 (átomos fuera de campo), si no se hace 0 (carácter)
  if ((Estrategia != 0)&&(Estrategia != 1)&&(Estrategia != 2) && (Estrategia !=3)) {Estrategia = 0;}
  
  if (debug){
  	printf("Dato %s Estrategia %d\n", dato, Estrategia);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: SISTEMA DE CONTROL */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber qué sistema de control hay implementado */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  Control = atoi(dato);
  
  // tiene que ser 0 (DAQ) o 1 (FPGA), si no se hace 0 (DAQ)
  if ((Control != 0)&&(Control != 1)) {Control = 0;}
  
  if (debug){
  	printf("Dato %s Control %d\n", dato, Control);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL ERROR DE CAMPO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la tensión de alimentación del galvo que produce un desplazamiento máximo */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ControlarErrorCampo = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 1 (activado)
  if ((ControlarErrorCampo != 0) && (ControlarErrorCampo != 1)) {ControlarErrorCampo = 1;}
  
  if (debug){
  	printf("Dato %s ControlarErrorCampo %d\n", dato, ControlarErrorCampo);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: CONTROL ERROR DE GALVOS */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor de la tensión de alimentación del galvo que produce un desplazamiento máximo */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  ControlarErrorGalvos = atoi(dato);
  
  // tiene que ser 0 o 1, si no se hace 1 (activado)
  if ((ControlarErrorGalvos != 0) && (ControlarErrorGalvos != 1)) {ControlarErrorGalvos = 1;}
  
  if (debug){
  	printf("Dato %s ControlarErrorGalvos %d\n", dato, ControlarErrorGalvos);
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: TURNOS */
  if (fgets(record, sizeof(record), fichero) != NULL) { // puede no existir, si es una actualización de una versión SW anterior
  
  	// lEE los valores de los turnos separados por tabuladores
  	for (i=0; i<NumeroTurnos; i++) {
  
  		/* Lee el valor de la tensión de alimentación del galvo que produce un desplazamiento máximo */
  		fgets(record, sizeof(record), fichero);
  		dato = strtok(record, "\t"); HoraInicioTurno[i] = atoi(dato);
  		dato = strtok(NULL, "\t"); MinutoInicioTurno[i] = atoi(dato);
  		dato = strtok(NULL, "\t"); HoraFinTurno[i] = atoi(dato);
  		dato = strtok(NULL, "\t"); MinutoFinTurno[i] = atoi(dato);
  		dato = strtok(NULL, "\t\n"); 
  		if (dato!=NULL) {
  			strcpy(TextoTurno[i], dato);
  		}
  		else {
  			strcpy (TextoTurno[i], "");
  		}
  				
  		if (debug){
  			printf("Turno %d - %d\t%d\t%d\t%d\%s\n", i, HoraInicioTurno[i], MinutoInicioTurno[i], HoraFinTurno[i], MinutoFinTurno[i], TextoTurno[i]);
  		}
  		
  	}
  
  }
  
  else {
  
  	// lEE los valores de los turnos separados por tabuladores
  	for (i=0; i<NumeroTurnos; i++) {
  
  		HoraInicioTurno[i] = 0;
  		MinutoInicioTurno[i] = 0;
  		HoraFinTurno[i] = 0;
  		MinutoFinTurno[i] = 0;
  		strcpy (TextoTurno[i], "");
  	
  		if (debug){
  			printf("Turno %d - %d\t%d\t%d\t%d\%s\n", i, HoraInicioTurno[i], MinutoInicioTurno[i], HoraFinTurno[i], MinutoFinTurno[i], TextoTurno[i]);
  		}	
  	
  	}
  	
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: TIPO DE LASER */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber qué sistema de control hay implementado */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  TipoLaser = atoi(dato);
  
  // tiene que ser 1 (CO2) o 2 (Fibra), si no se hace 1 (CO2)
  if ((TipoLaser != 0)&&(TipoLaser != 1)) {TipoLaser = 0;}
  
  if (debug){
  	printf("Dato %s TipoLaser %d\n", dato, TipoLaser);
  }
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Lee la línea con un comentario: FICHERO CORRECCION ACTIVO */
  fgets(record, sizeof(record), fichero);
  
  /* Lee el valor que hay que escribir para saber qué sistema de control hay implementado */
  fgets(record, sizeof(record), fichero);
  dato = strtok(record, "\t");
  FicheroCorreccionActivo = atoi(dato);
  
  // tiene que ser 0 (No Activo) o 1 (Activo), si no se hace 0 (No Activo)
  if ((FicheroCorreccionActivo != 0)&&(FicheroCorreccionActivo != 1)) {FicheroCorreccionActivo = 0;}
  
  if (debug){
  	printf("Dato %s Fichero Correccion Activo %d\n", dato, FicheroCorreccionActivo);
  }
  
  		
  // cierra el archivo
  fclose(fichero);	
  
  ////////////////////////////////////////////////////////////////////////////////
  // Abre ahora el fichero de control de acceso, que es binario
  ////////////////////////////////////////////////////////////////////////////////
  
  fichero = fopen("/root/itaca/acceso.bin", "rb");		
  
  if (fichero == NULL) {
  	
  	// Si el fichero no existe el control está activado
  	ControlAcceso = ON;
  }
  
  else {
  
  	// Lee en binario el primer carácter
  	caracter = fgetc(fichero);
  	
  	// Si es un 1 el control de acceso está desactivado, en cualquier otro caso está activado
  	if (caracter == 1) {	
  		ControlAcceso = OFF;
  	}
  	else {
  		ControlAcceso = ON;
  	}
  	
  	// cierra el archivo
  	fclose(fichero);
  
  }
  
  ////////////////////////////////////////////////////////////////////////////////
  // Abre ahora el fichero de contraseña de configuración
  ////////////////////////////////////////////////////////////////////////////////
  
  fichero = fopen("/root/itaca/configuracion.bin", "rb");		
  
  if (fichero == NULL) {
  	
  	// Si el fichero no existe se usa la contraseña por defecto
  	strcpy(PasswordConfiguracion, PASSWORD);
  }
  
  else {
  
  	// Lee en la contraseña
  	fgets(PasswordConfiguracion, sizeof(PasswordConfiguracion), fichero);
  	
  	// cierra el archivo
  	fclose(fichero);
  
  }
  
  return 0;
}

int escribir_configuracion() {
  // función para escribir los datos de configuración del sistema
  int i;
  char record[256];		/* array to hold each "record" */ 
  FILE *fichero;                  /* pointer to file */
  
  /* open the file to write */
  fichero = fopen("/root/itaca/itaca.conf", "w");			
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL DE LÁSER\n", fichero);
  
  /* Escribe el valor del Periodo tren de pulsos */
  sprintf(record, "%d		Periodo tren de pulsos	(1 - 100.000 microsegundos)\n", PeriodoTrenPulsos);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  /* Escribe el valor del Retardo Laser On */
  sprintf(record, "%d		Retardo Laser On .	(0 - 100.000 microsegundos)\n", RetardoLaserOn);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  /* Escribe el valor del Retardo Laser Off */
  sprintf(record, "%d		Retardo Laser Off 	(0 - 100.000 microsegundos)\n", RetardoLaserOff);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL DE SALTO\n", fichero);
  
  /* Escribe el valor de la Velocidad de salto */
  sprintf(record, "%d		Velocidad de salto	(100 - 50.000 mm/s)\n", VelocidadSalto);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  /* Escribe el valor del Retardo Salto */
  sprintf(record, "%d		Retardo Salto 		(0 - 100.000 microsegundos)\n", RetardoSalto);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	RETARDOS POLÍGONO Y MARCAJE\n", fichero);
  
  /* Escribe el valor del Retardo de Polígono */
  sprintf(record, "%d		Retardo Polígono 	(0 - 100.000 microsegundos)\n", RetardoPoligono);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  /* Escribe el valor del Retardo de Marcaje */
  sprintf(record, "%d		Retardo Marcaje 	(0 - 100.000 microsegundos)\n", RetardoMarcaje);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	FICHERO CORRECCIÓN\n", fichero);
  
  /* Escribe el valor de la calibración de la corrección */
  sprintf(record, "%0.1f		Calibración corrección	(bits/mm)\n", CalibracionCorreccion);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	ORIENTACIÓN Y AVANCE\n", fichero);
  
  /* Escribe el valor de la Orientacion */
  sprintf(record, "%d		Orientación		0, 90, 180 o 270º\n", Orientacion);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  /* Escribe el valor del Avance */
  sprintf(record, "%d		Avance			0, 90, 180 o 270º\n", Avance);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	MARCAJE DINÁMICO\n", fichero);
  
  /* Escribe el valor del Marcaje Dinamico Activo */
  sprintf(record, "%d		Activado		(0: desactivado 1:activado 2:velocidad constante)\n", MarcajeDinamicoActivo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  /* Escribe el valor de la Calibracion del Encoder */
  sprintf(record, "%0.1f		Calibración encoder	(cuentas por milímetro)\n", CalibracionEncoder);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }   
  
  /* Escribe el valor de la Velocidad de Linea */
  sprintf(record, "%0.1f		Velocidad línea		(metros/min)\n", VelocidadLinea);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }
  	
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL GALVOS\n", fichero);
  
  /* Escribe el valor de la tensión VGalvoRef_MaximoBits */
  sprintf(record, "%0.1f		VGalvoRef_MaximoBits 	(V) Tensión en galvo para desplazarse al extremo del campo\n", VGalvoRef_MaximoBits);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  	
  	
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL EXTRACTOR\n", fichero);
  
  /* Escribe el valor del Extractor */
  sprintf(record, "%d		Extractor Activado	(0: desactivado - 1: activado) Controla la activación del extractor\n", ExtractorActivado);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL DISPARO FOTOCÉLULA\n", fichero);
  
  /* Escribe el valor del Valor de Disparo de la fotocéclula */
  sprintf(record, "%d		Valor Disparo		(0 - 1) Controla qué valor digital de la fotocélula dispara la marca\n", ValorDisparo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	PERIODO\n", fichero);
  
  /* Escribe el valor del PERIODO_MICROSEGUNDOS */
  sprintf(record, "%d		Periodo Microsegundos	(10 - 1000) Periodo RT en microsegundos\n", PERIODO_MICROSEGUNDOS);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	SERVICIO TÉCNICO\n", fichero);
  
  /* Escribe el valor del ServicioTecnico */
  sprintf(record, "%d		ServicioTecnico		(0 - 1) Controla la activación del modo de servicio técnico\n", ServicioTecnico);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	IDIOMA\n", fichero);
  
  /* Escribe el valor del Idioma */
  sprintf(record, "%d		Idioma			Idioma del GUI: 0-español, 1-inglés, 2-italiano\n", Idioma);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	SPOT\n", fichero);
  
  /* Escribe el valor del Spot */
  sprintf(record, "%d		Spot			Tamaño del spot en micras (se usa en los códigos de barras)\n", Spot);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	ACTIVACIÓN GALVOS\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		ValorActivacionGalvos	Valor digital (0/1) que hay que escribir para activar los galvos\n", ValorActivacionGalvos);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL PUERTO SERIE\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		PuertoSerieActivo	(0 - 1) Activa o no el control por el puerto serie\n", PuertoSerieActivo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CENTRADO\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Centrado		(0 - 1) Activa o no el centrado automáticamente en el inicio\n", Centrado);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: TIPO DE DISPARO */
  fputs("#	TIPO DE DISPARO\n", fichero);
  
  /* Escribe el valor del tipo de disparo */
  sprintf(record, "%d		TipoDisparo		(0 - 1) Disparo externo o interno\n", TipoDisparo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: RETARDO DE DISPARO */
  fputs("#	RETARDO DE DISPARO\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Retardo Disparo 	(0 - 1000 milímetros) Retardo en milímetros tras el disparo de la fotocélula\n", RetardoDisparo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
   	
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: MÍNIMO DE LECTURAS CONSECUTIVAS */
  fputs("#	MÍNIMO DE LECTURAS CONSECUTIVAS\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		MinimoLecturasConsecutivas	(1 - 1000) Número mínimo de lecturas consecutivas de disparo de fotocélula\n", MinimoLecturasConsecutivas);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: SEPARACIÓN ENTRE DISPAROS */
  fputs("#	SEPARACIÓN ENTRE DISPAROS\n", fichero);
  
  /* Escribe el valor de la separación entre disparos */
  sprintf(record, "%d		SeparacionEntreDisparos	(0 - 10000 mm) Separación entre disparos internos\n", SeparacionEntreDisparos_mm);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	REVERSO\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Reverso			(0 - 1) Activa o no la impresión en el reverso del material (impresión en espejo)\n", Reverso);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	ESTRATEGIA DE MARCAJE\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Estrategia de marcaje	0-carácter, 1-átomos, 2-átomos fuera de campo\n", Estrategia);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	SISTEMA DE CONTROL\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Sistema de control	0-DAQ, 1-FPGA\n", Control);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL ERROR DE CAMPO\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		ControlarErrorCampo\n", ControlarErrorCampo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	CONTROL ERROR DE GALVOS\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		ControlarErrorGalvos\n", ControlarErrorGalvos);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	TURNOS\n", fichero);
  
  // Escribe los valores de los turnos separados por tabuladores
  for (i=0; i<NumeroTurnos; i++) {
  
  	sprintf(record, "%d\t%d\t%d\t%d\t%s\n", HoraInicioTurno[i], MinutoInicioTurno[i], HoraFinTurno[i], MinutoFinTurno[i], TextoTurno[i]);
  	fputs(record, fichero);
  	
  	if (debug){
  		printf("Escribiendo: %s", record);
  	}
  	
  }
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	TIPO DE LASER\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Tipo de Laser	1-CO2, 2-Fibra\n", TipoLaser);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
  //////////////////////////////////////////////////////////////////////////////
  /* Escribe la línea con un comentario: */
  fputs("#	FICHERO DE CORRECCION ACTIVO\n", fichero);
  
  /* Escribe el valor */
  sprintf(record, "%d		Fichero de correccion activo	0-No Activo, 1-Activo\n", FicheroCorreccionActivo);
  fputs(record, fichero);
  
  if (debug){
  	printf("Escribiendo: %s", record);
  }  
  
   	 
  //////////////////////////////////////////////////////////////////////////////
  /* cierra el archivo */
  fclose(fichero);	
  
  return 0;
}

Fl_Double_Window *VentanaConfiguracion=(Fl_Double_Window *)0;

Fl_Box *EtiquetaLinea=(Fl_Box *)0;

Fl_Box *EtiquetaDisparo=(Fl_Box *)0;

Fl_Box *EtiquetaAvanzado=(Fl_Box *)0;

Fl_Box *EtiquetaSistema=(Fl_Box *)0;

Fl_Counter *CounterPeriodo=(Fl_Counter *)0;

static void cb_CounterPeriodo(Fl_Counter* o, void*) {
  PeriodoTrenPulsos = (int) o->value();
}

Fl_Counter *CounterRetardoLaserOn=(Fl_Counter *)0;

static void cb_CounterRetardoLaserOn(Fl_Counter* o, void*) {
  RetardoLaserOn = (int) o->value();
}

Fl_Counter *CounterRetardoLaserOff=(Fl_Counter *)0;

static void cb_CounterRetardoLaserOff(Fl_Counter* o, void*) {
  RetardoLaserOff = (int) o->value();
}

Fl_Counter *CounterCalibracion=(Fl_Counter *)0;

static void cb_CounterCalibracion(Fl_Counter* o, void*) {
  CalibracionCorreccion = o->value();
}

Fl_Counter *CounterVelocidadSalto=(Fl_Counter *)0;

static void cb_CounterVelocidadSalto(Fl_Counter* o, void*) {
  VelocidadSalto = (int) o->value();
}

Fl_Counter *CounterRetardoSalto=(Fl_Counter *)0;

static void cb_CounterRetardoSalto(Fl_Counter* o, void*) {
  RetardoSalto = (int) o->value();
}

Fl_Counter *CounterRetardoPoligono=(Fl_Counter *)0;

static void cb_CounterRetardoPoligono(Fl_Counter* o, void*) {
  RetardoPoligono = (int) o->value();
}

Fl_Counter *CounterRetardoMarcaje=(Fl_Counter *)0;

static void cb_CounterRetardoMarcaje(Fl_Counter* o, void*) {
  RetardoMarcaje = (int) o->value();
}

Fl_Counter *CounterControlGalvos=(Fl_Counter *)0;

static void cb_CounterControlGalvos(Fl_Counter* o, void*) {
  VGalvoRef_MaximoBits = o->value();
}

Fl_Choice *ChoiceValorActivacionGalvos=(Fl_Choice *)0;

static void cb_ChoiceValorActivacionGalvos(Fl_Choice* o, void*) {
  ValorActivacionGalvos = o->value();
}

Fl_Choice *ChoiceOrientacion=(Fl_Choice *)0;

static void cb_ChoiceOrientacion(Fl_Choice* o, void*) {
  switch (o->value()) {

	case 0:
	Orientacion = 0;
	break; 
	
	case 1:
	Orientacion = 90;
	break; 
	
	case 2:
	Orientacion = 180;
	break; 
	
	case 3:
	Orientacion = 270;
	break;

};
}

Fl_Choice *ChoiceAvance=(Fl_Choice *)0;

static void cb_ChoiceAvance(Fl_Choice* o, void*) {
  switch (o->value()) {

	case 0:
	Avance = 0;
	break; 
	
	case 1:
	Avance = 90;
	break; 
	
	case 2:
	Avance = 180;
	break; 
	
	case 3:
	Avance = 270;
	break;

};
}

Fl_Choice *ChoiceDisparoFotocelula=(Fl_Choice *)0;

static void cb_ChoiceDisparoFotocelula(Fl_Choice* o, void*) {
  ValorDisparo = o->value();
}

Fl_Counter *CounterRetardoDisparo=(Fl_Counter *)0;

static void cb_CounterRetardoDisparo(Fl_Counter* o, void*) {
  RetardoDisparo = (int)o->value();
}

Fl_Counter *CounterLecturasConsecutivas=(Fl_Counter *)0;

static void cb_CounterLecturasConsecutivas(Fl_Counter* o, void*) {
  MinimoLecturasConsecutivas = (int)o->value();
}

Fl_Counter *CounterSeparacionEntreDisparos=(Fl_Counter *)0;

static void cb_CounterSeparacionEntreDisparos(Fl_Counter* o, void*) {
  // Cambia la separación entre disparos
SeparacionEntreDisparos_mm = (int)o->value();
}

Fl_Choice *ChoiceTipoDisparo=(Fl_Choice *)0;

static void cb_ChoiceTipoDisparo(Fl_Choice* o, void*) {
  TipoDisparo = o->value();

if (TipoDisparo == 0) {		// externo

	ChoiceDisparoFotocelula->activate();
	CounterLecturasConsecutivas->activate();
	CounterRetardoDisparo->activate();
	CounterSeparacionEntreDisparos->deactivate();
	
}

else if (TipoDisparo == 1) {	// interno

	ChoiceDisparoFotocelula->deactivate();
	CounterLecturasConsecutivas->deactivate();
	CounterRetardoDisparo->deactivate();
	CounterSeparacionEntreDisparos->activate();
	
};
}

Fl_Choice *ChoiceMarcajeDinamico=(Fl_Choice *)0;

static void cb_ChoiceMarcajeDinamico(Fl_Choice* o, void*) {
  MarcajeDinamicoActivo = o->value();

if (MarcajeDinamicoActivo == 0) {

	CounterEncoder->deactivate();
	CounterVelocidadLinea->deactivate();
	
}

else if (MarcajeDinamicoActivo == 1) {

	CounterEncoder->activate();
	CounterVelocidadLinea->deactivate();
	
}

else if (MarcajeDinamicoActivo == 2) {

	CounterEncoder->deactivate();
	CounterVelocidadLinea->activate();

};
}

Fl_Counter *CounterEncoder=(Fl_Counter *)0;

static void cb_CounterEncoder(Fl_Counter* o, void*) {
  CalibracionEncoder = o->value();
}

Fl_Counter *CounterVelocidadLinea=(Fl_Counter *)0;

static void cb_CounterVelocidadLinea(Fl_Counter* o, void*) {
  VelocidadLinea = o->value();
}

Fl_Choice *ChoiceIdioma=(Fl_Choice *)0;

static void cb_ChoiceIdioma(Fl_Choice* o, void*) {
  int i;

// cambia el idioma
Idioma = o->value();

// Cambia todas las etiquetas:
switch (Idioma) {

	case ESP:
	EtiquetaLinea->label("LÍNEA");
	ChoiceOrientacion->label("Orientación");
	ChoiceAvance->label("Avance");
	ChoiceCentrado->label("Centrado");
	ChoiceReverso->label("Impresión en reverso");
	ChoiceMarcajeDinamico->label("Marcaje dinámico");
	CounterEncoder->label("Encoder (cuentas/mm)");
	CounterVelocidadLinea->label("Velocidad línea (m/min)");
	
	EtiquetaDisparo->label("DISPARO");
	ChoiceTipoDisparo->label("Tipo disparo");
	ChoiceDisparoFotocelula->label("Valor disparo");
	CounterLecturasConsecutivas->label("Lecturas consecutivas");
	CounterRetardoDisparo->label("Retardo disparo (mm)");
	CounterSeparacionEntreDisparos->label("Separación (mm)");
	
	EtiquetaAvanzado->label("AVANZADO");
	CounterPeriodo->label("Periodo (us)");
	CounterRetardoLaserOn->label("Retardo Láser On (us)");
	CounterRetardoLaserOff->label("Retardo Láser Off (us)");
	CounterCalibracion->label("Calibración (bits/mm)");
	CounterSpot->label("Spot (micras)");
	
	CounterVelocidadSalto->label("Velocidad salto (mm/s)");
	CounterRetardoSalto->label("Retardo salto (us)");
	CounterRetardoPoligono->label("Retardo polígono (us)");
	CounterRetardoMarcaje->label("Retardo marcaje (us)");
	ChoiceValorActivacionGalvos->label("Activación Galvos");
	CounterControlGalvos->label("Control galvos (V)");
	
	EtiquetaSistema->label("SISTEMA");
	ChoiceServicioTecnico->label("Servicio técnico");
	ChoiceIdioma->label("Idioma");
	CounterPeriodoRT->label("Periodo RT (us)");
	ChoiceControlPuertoSerie->label("Control Puerto Serie");
	ChoiceExtractor->label("Extractor");
	ChoiceErrorCampo->label("Error de campo");
	ChoiceErrorGalvos->label("Error de galvos");	
	ChoiceControlEstrategia->label("Estrategia de marcaje");
	BotonTurnos->label("Editar turnos");
	BotonCambiarFechaHora->label("Fecha y hora");
	BotonImportarGraficos->label("Importar gráficos");
	
	ChoiceControl->label("Sistema de Control");
	
	ChoiceTipoLaser->label("Tipo de laser");
	ChoiceFicheroCorreccionActivo->label("Fichero Correccion");
	
	BotonCancelar->label("Cancelar");
	BotonAceptar->label("Aceptar");	
	
	// Ventana de turnos
	CounterHoraInicioTurno0->label("Hora inicio");
	CounterMinutoInicioTurno0->label("Minuto inicio");
	CounterHoraFinTurno0->label("Hora fin");
	CounterMinutoFinTurno0->label("Minuto fin");
	CuadroTextoTurno0->label("Texto");
	Aceptar_VentanaTurnos->label("Aceptar");
	Cancelar_VentanaTurnos->label("Cancelar");
	
	break; 
	
	case ING:
	EtiquetaLinea->label("LINE");
	ChoiceOrientacion->label("Orientation");
	ChoiceAvance->label("Progress");
	ChoiceCentrado->label("Centered");
	ChoiceReverso->label("Back printing");
	ChoiceMarcajeDinamico->label("Dynamic marking");
	CounterEncoder->label("Encoder (counts/mm)");
	CounterVelocidadLinea->label("Line speed (m/min)");

	EtiquetaDisparo->label("TRIGGER");
	ChoiceTipoDisparo->label("Trigger type");
	ChoiceDisparoFotocelula->label("Trigger value");
	CounterLecturasConsecutivas->label("Consecutive readings");
	CounterRetardoDisparo->label("Trigger delay (mm)");
	CounterSeparacionEntreDisparos->label("Separation (mm)");

	EtiquetaAvanzado->label("ADVANCED");
	CounterPeriodo->label("Period (us)");
	CounterRetardoLaserOn->label("Laser On delay (us)");
	CounterRetardoLaserOff->label("Laser Off delay (us)");
	CounterCalibracion->label("Calibration (bits/mm)");
	CounterSpot->label("Spot (microns)");

	CounterVelocidadSalto->label("Jump speed (mm/s)");
	CounterRetardoSalto->label("Jump delay (us)");
	CounterRetardoPoligono->label("Poligon delay (us)");
	CounterRetardoMarcaje->label("Mark delay (us)");
	ChoiceValorActivacionGalvos->label("Galvos Activation");
	CounterControlGalvos->label("Galvo control (V)");
	
	EtiquetaSistema->label("SYSTEM");
	ChoiceServicioTecnico->label("Technical service");
	ChoiceIdioma->label("Language");
	CounterPeriodoRT->label("RT Period (us)");
	ChoiceControlPuertoSerie->label("Serial Port Control");
	ChoiceExtractor->label("Extractor");
	ChoiceErrorCampo->label("Field error");
	ChoiceErrorGalvos->label("Galvo error");
	ChoiceControlEstrategia->label("Marking strategy");
	BotonTurnos->label("Edit shifts");
	BotonCambiarFechaHora->label("Date and time");
	BotonImportarGraficos->label("Import graphics");

	ChoiceControl->label("Control System");

	ChoiceTipoLaser->label("Laser Type");
	ChoiceFicheroCorreccionActivo->label("Correction file");
	
	BotonCancelar->label("Cancel");
	BotonAceptar->label("Accept");

	// Ventana de turnos
	CounterHoraInicioTurno0->label("Starting hour");
	CounterMinutoInicioTurno0->label("Starting minute");
	CounterHoraFinTurno0->label("Ending hour");
	CounterMinutoFinTurno0->label("Ending minute");
	CuadroTextoTurno0->label("Text");
	Aceptar_VentanaTurnos->label("Accept");
	Cancelar_VentanaTurnos->label("Cancel");
	
	break; 

	case ITA:
	EtiquetaLinea->label("LINEA");
	ChoiceOrientacion->label("Orientamento");
	ChoiceAvance->label("Avanzamento");
	ChoiceCentrado->label("Centrato");
	ChoiceReverso->label("Reversi");
	ChoiceMarcajeDinamico->label("Marcatura dinamica");
	CounterEncoder->label("Encoder (conta/mm)");
	CounterVelocidadLinea->label("Velocità linea (m/min)");

	EtiquetaDisparo->label("TRIGGER");
	ChoiceTipoDisparo->label("Tipo trigger");
	ChoiceDisparoFotocelula->label("Valore trigger");
	CounterLecturasConsecutivas->label("Letture consecutive");
	CounterRetardoDisparo->label("Ritardo trigger (mm)");
	CounterSeparacionEntreDisparos->label("Separazione (mm)");

	EtiquetaAvanzado->label("AVANZATO");
	CounterPeriodo->label("Periodo (us)");
	CounterRetardoLaserOn->label("Ritardo Laser On (us)");
	CounterRetardoLaserOff->label("Ritardo Laser Off (us)");
	CounterCalibracion->label("Calibratura (bits/mm)");
	CounterSpot->label("Spot (microns)");

	CounterVelocidadSalto->label("Velocità salto (mm/s)");
	CounterRetardoSalto->label("Ritardo salto (us)");
	CounterRetardoPoligono->label("Ritardo poligono (us)");
	CounterRetardoMarcaje->label("Ritardo marcatura (us)");
	ChoiceValorActivacionGalvos->label("Attivazione Galvos");	
	CounterControlGalvos->label("Galvos controllo (V)");

	EtiquetaSistema->label("SISTEMA");
	ChoiceServicioTecnico->label("Servizio tecnica");
	ChoiceIdioma->label("Lingua");
	CounterPeriodoRT->label("Periodo RT (us)");
	ChoiceControlPuertoSerie->label("Controllo Porta Seriale");
	ChoiceExtractor->label("Aspirazione");
	ChoiceErrorCampo->label("Errore campo");
	ChoiceErrorGalvos->label("Errore galvos");
	ChoiceControlEstrategia->label("Marcatura strategia");
	BotonTurnos->label("Edit turni");
	BotonCambiarFechaHora->label("Data e ora");
	BotonImportarGraficos->label("Importare logos");

	ChoiceControl->label("Sistema de Controllo");

	ChoiceTipoLaser->label("Tipo di laser");
	ChoiceFicheroCorreccionActivo->label("Fichero Correzzione");
	
	BotonCancelar->label("Annulla");
	BotonAceptar->label("Accettare");

	// Ventana de turnos
	CounterHoraInicioTurno0->label("Ora inizio");
	CounterMinutoInicioTurno0->label("Minuti inizio");
	CounterHoraFinTurno0->label("Ora fine");
	CounterMinutoFinTurno0->label("Minuti fine");
	CuadroTextoTurno0->label("Texti");
	Aceptar_VentanaTurnos->label("Accettare");
	Cancelar_VentanaTurnos->label("Annulla");
	
	break;

}

// rellena los valores en el idioma que corresponda
ChoiceMarcajeDinamico->clear();
for (i=0; i<3; i++) {
	ChoiceMarcajeDinamico->add(ValoresDinamico[Idioma][i]);
}
ChoiceMarcajeDinamico->value(MarcajeDinamicoActivo);

ChoiceTipoDisparo->clear();
for (i=0; i<2; i++) {
	ChoiceTipoDisparo->add(ValoresTipoDisparo[Idioma][i]);
}
ChoiceTipoDisparo->value(TipoDisparo);

ChoiceIdioma->clear();
for (i=0; i<3; i++) {
	ChoiceIdioma->add(ValoresIdioma[Idioma][i]);
}
ChoiceIdioma->value(Idioma);

ChoiceControl->clear();
for (i=0; i<2; i++) {
	ChoiceControl->add(ValoresControl[Idioma][i]);
}
ChoiceControl->value(Control);


// Valores activación
ChoiceServicioTecnico->clear();
ChoiceExtractor->clear();
ChoiceErrorCampo->clear();
ChoiceErrorGalvos->clear();
ChoiceCentrado->clear();
ChoiceReverso->clear();
ChoiceControlPuertoSerie->clear();

for (i=0; i<2; i++) {
	ChoiceServicioTecnico->add(ValoresActivacion[Idioma][i]);
	ChoiceExtractor->add(ValoresActivacion[Idioma][i]);
	ChoiceErrorCampo->add(ValoresActivacion[Idioma][i]);
	ChoiceErrorGalvos->add(ValoresActivacion[Idioma][i]);
	ChoiceCentrado->add(ValoresActivacion[Idioma][i]);
	ChoiceReverso->add(ValoresActivacion[Idioma][i]);	
	ChoiceControlPuertoSerie->add(ValoresActivacion[Idioma][i]);
	ChoiceControlEstrategia->add(ValoresActivacion[Idioma][i]);
}	

ChoiceServicioTecnico->value(ServicioTecnico);
ChoiceExtractor->value(ExtractorActivado);
ChoiceErrorCampo->value(ControlarErrorCampo);
ChoiceErrorGalvos->value(ControlarErrorGalvos);
ChoiceCentrado->value(Centrado);
ChoiceReverso->value(Reverso);
ChoiceControlPuertoSerie->value(PuertoSerieActivo);

ChoiceControlEstrategia->clear();

for (i=0; i<3; i++) {
	ChoiceControlEstrategia->add(ValoresEstrategia[Idioma][i]);
}

ChoiceControlEstrategia->value(Estrategia);
}

Fl_Button *BotonCambiarFechaHora=(Fl_Button *)0;

static void cb_BotonCambiarFechaHora(Fl_Button* o, void*) {
  // lanza una ventana emergente para cambiar la fecha y la hora
switch (Idioma) {

	case ESP:
	system("kdeinit_wrapper kcmshell --lang es clock");
	break; 
	
	case ING:
	system("kdeinit_wrapper kcmshell --lang en_US clock");
	break; 
	
	case ITA:
	system("kdeinit_wrapper kcmshell --lang it clock");
	break;
	
}

// actualiza el reloj de la BIOS
system("mount / -o rw,remount");
system("hwclock --systohc");
system("mount / -o ro,remount");
}

Fl_Counter *CounterPeriodoRT=(Fl_Counter *)0;

static void cb_CounterPeriodoRT(Fl_Counter* o, void*) {
  PERIODO_MICROSEGUNDOS = (int) o->value();
}

Fl_Choice *ChoiceExtractor=(Fl_Choice *)0;

static void cb_ChoiceExtractor(Fl_Choice* o, void*) {
  ExtractorActivado = o->value();
}

Fl_Choice *ChoiceServicioTecnico=(Fl_Choice *)0;

static void cb_ChoiceServicioTecnico(Fl_Choice* o, void*) {
  ServicioTecnico = o->value();
}

Fl_Counter *CounterSpot=(Fl_Counter *)0;

static void cb_CounterSpot(Fl_Counter* o, void*) {
  Spot = (int)o->value();
}

Fl_Button *BotonImportarGraficos=(Fl_Button *)0;

static void cb_BotonImportarGraficos(Fl_Button* o, void*) {
  //copia los archivos *.plt que haya en la raiz de dispositivos usb
system("mount / -o rw,remount");
system("cp /media/*/*.plt /rootFLS/itaca");
system("cp /media/*/*.plt /root/itaca");
system("mount / -o ro,remount");
}

Fl_Choice *ChoiceControlPuertoSerie=(Fl_Choice *)0;

static void cb_ChoiceControlPuertoSerie(Fl_Choice* o, void*) {
  PuertoSerieActivo = o->value();
}

Fl_Choice *ChoiceCentrado=(Fl_Choice *)0;

static void cb_ChoiceCentrado(Fl_Choice* o, void*) {
  Centrado = o->value();
}

Fl_Button *BotonAceptar=(Fl_Button *)0;

static void cb_BotonAceptar(Fl_Button* o, void*) {
  if (ControlAcceso) {

	// Desactiva la ventana principal para que resalte la ventana emergente que saldrá a continuación
	VentanaConfiguracion->deactivate();

	// Cargar la ventana de password
	VentanaPassword->show();

}

else {

	// guarda los datos modificados en /root/itaca/itaca.conf
	escribir_configuracion();

	// actualiza el disco
	system("mount / -o rw,remount");
	system("cp /root/itaca/itaca.conf /rootFLS/itaca/itaca.conf");
	system("mount / -o ro,remount");

	// sale del programa	
	exit(0);
	
};
}

Fl_Button *BotonCancelar=(Fl_Button *)0;

static void cb_BotonCancelar(Fl_Button*, void*) {
  // sale del programa sin grabar los cambios	
exit(0);
}

Fl_Choice *ChoiceReverso=(Fl_Choice *)0;

static void cb_ChoiceReverso(Fl_Choice* o, void*) {
  Reverso = o->value();
}

Fl_Choice *ChoiceControlEstrategia=(Fl_Choice *)0;

static void cb_ChoiceControlEstrategia(Fl_Choice* o, void*) {
  Estrategia = o->value();
}

Fl_Choice *ChoiceControl=(Fl_Choice *)0;

static void cb_ChoiceControl(Fl_Choice* o, void*) {
  Control = o->value();
}

Fl_Choice *ChoiceErrorCampo=(Fl_Choice *)0;

static void cb_ChoiceErrorCampo(Fl_Choice* o, void*) {
  ControlarErrorCampo = o->value();
}

Fl_Choice *ChoiceErrorGalvos=(Fl_Choice *)0;

static void cb_ChoiceErrorGalvos(Fl_Choice* o, void*) {
  ControlarErrorGalvos = o->value();
}

Fl_Button *BotonTurnos=(Fl_Button *)0;

static void cb_BotonTurnos(Fl_Button*, void*) {
  // Carga los datos y muestra la ventana de edición de turnos
CargarVentanaTurnos();
}

Fl_Choice *ChoiceTipoLaser=(Fl_Choice *)0;

static void cb_ChoiceTipoLaser(Fl_Choice* o, void*) {
  TipoLaser = o->value();
}

Fl_Choice *ChoiceFicheroCorreccionActivo=(Fl_Choice *)0;

static void cb_ChoiceFicheroCorreccionActivo(Fl_Choice* o, void*) {
  FicheroCorreccionActivo = o->value();
}

Fl_Double_Window* Make_Window() {
  { VentanaConfiguracion = new Fl_Double_Window(800, 600);
    VentanaConfiguracion->box(FL_BORDER_BOX);
    VentanaConfiguracion->color(FL_BACKGROUND2_COLOR);
    { Fl_Box* o = EtiquetaLinea = new Fl_Box(10, 10, 140, 35, "L\315NEA");
      EtiquetaLinea->box(FL_BORDER_BOX);
      EtiquetaLinea->color(FL_BACKGROUND2_COLOR);
      EtiquetaLinea->labelsize(18);
      switch (Idioma) {case ESP:o->label("LÍNEA");break; case ING:o->label("LINE");break; case ITA:o->label("LINEA");break;}
    } // Fl_Box* EtiquetaLinea
    { Fl_Box* o = EtiquetaDisparo = new Fl_Box(170, 10, 140, 35, "DISPARO");
      EtiquetaDisparo->box(FL_BORDER_BOX);
      EtiquetaDisparo->color(FL_BACKGROUND2_COLOR);
      EtiquetaDisparo->labelsize(18);
      switch (Idioma) {case ESP:o->label("DISPARO");break; case ING:o->label("TRIGGER");break; case ITA:o->label("TRIGGER");break;}
    } // Fl_Box* EtiquetaDisparo
    { Fl_Box* o = EtiquetaAvanzado = new Fl_Box(495, 10, 295, 35, "AVANZADO");
      EtiquetaAvanzado->box(FL_BORDER_BOX);
      EtiquetaAvanzado->color(FL_BACKGROUND2_COLOR);
      EtiquetaAvanzado->labelsize(18);
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("AVANZADO");break; case ING:o->label("ADVANCED");break; case ITA:o->label("AVANZATO");break;}
    } // Fl_Box* EtiquetaAvanzado
    { Fl_Box* o = EtiquetaSistema = new Fl_Box(330, 10, 140, 35, "SISTEMA");
      EtiquetaSistema->box(FL_BORDER_BOX);
      EtiquetaSistema->color(FL_BACKGROUND2_COLOR);
      EtiquetaSistema->labelsize(18);
      switch (Idioma) {case ESP:o->label("SISTEMA");break; case ING:o->label("SYSTEM");break; case ITA:o->label("SISTEMA");break;}
    } // Fl_Box* EtiquetaSistema
    { Fl_Box* o = new Fl_Box(160, 12, 1, 500);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)19);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(320, 12, 1, 500);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)19);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(480, 12, 1, 500);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)19);
    } // Fl_Box* o
    { Fl_Counter* o = CounterPeriodo = new Fl_Counter(495, 70, 140, 30, "Periodo (us)");
      CounterPeriodo->box(FL_FLAT_BOX);
      CounterPeriodo->color((Fl_Color)48);
      CounterPeriodo->labelsize(12);
      CounterPeriodo->minimum(10);
      CounterPeriodo->maximum(100000);
      CounterPeriodo->step(1);
      CounterPeriodo->textfont(13);
      CounterPeriodo->textsize(12);
      CounterPeriodo->callback((Fl_Callback*)cb_CounterPeriodo);
      CounterPeriodo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterPeriodo->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(PeriodoTrenPulsos);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Periodo (us)");break; case ING:o->label("Period (us)");break; case ITA:o->label("Periodo (us)");break;}
    } // Fl_Counter* CounterPeriodo
    { Fl_Counter* o = CounterRetardoLaserOn = new Fl_Counter(495, 120, 140, 30, "Retardo L\341ser On (us)");
      CounterRetardoLaserOn->box(FL_FLAT_BOX);
      CounterRetardoLaserOn->color((Fl_Color)48);
      CounterRetardoLaserOn->labelsize(12);
      CounterRetardoLaserOn->minimum(0);
      CounterRetardoLaserOn->maximum(100000);
      CounterRetardoLaserOn->step(1);
      CounterRetardoLaserOn->textfont(13);
      CounterRetardoLaserOn->textsize(12);
      CounterRetardoLaserOn->callback((Fl_Callback*)cb_CounterRetardoLaserOn);
      CounterRetardoLaserOn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoLaserOn->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoLaserOn);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo Láser On (us)");break; case ING:o->label("Laser On delay (us)");break; case ITA:o->label("Ritardo Laser On (us)");break;}
    } // Fl_Counter* CounterRetardoLaserOn
    { Fl_Counter* o = CounterRetardoLaserOff = new Fl_Counter(495, 170, 140, 30, "Retardo L\341ser Off (us)");
      CounterRetardoLaserOff->box(FL_FLAT_BOX);
      CounterRetardoLaserOff->color((Fl_Color)48);
      CounterRetardoLaserOff->labelsize(12);
      CounterRetardoLaserOff->minimum(0);
      CounterRetardoLaserOff->maximum(100000);
      CounterRetardoLaserOff->step(1);
      CounterRetardoLaserOff->textfont(13);
      CounterRetardoLaserOff->textsize(12);
      CounterRetardoLaserOff->callback((Fl_Callback*)cb_CounterRetardoLaserOff);
      CounterRetardoLaserOff->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoLaserOff->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoLaserOff);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo Láser Off (us)");break; case ING:o->label("Laser Off delay (us)");break; case ITA:o->label("Ritardo Laser Off (us)");break;}
    } // Fl_Counter* CounterRetardoLaserOff
    { Fl_Counter* o = CounterCalibracion = new Fl_Counter(495, 420, 140, 30, "Calibraci\363n (bits/mm)");
      CounterCalibracion->box(FL_FLAT_BOX);
      CounterCalibracion->color((Fl_Color)48);
      CounterCalibracion->labelsize(12);
      CounterCalibracion->minimum(1);
      CounterCalibracion->maximum(10000);
      CounterCalibracion->step(1);
      CounterCalibracion->textfont(13);
      CounterCalibracion->textsize(12);
      CounterCalibracion->callback((Fl_Callback*)cb_CounterCalibracion);
      CounterCalibracion->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterCalibracion->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(CalibracionCorreccion);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Calibración (bits/mm)");break; case ING:o->label("Calibration (bits/mm)");break; case ITA:o->label("Calibratura (bits/mm)");break;}
    } // Fl_Counter* CounterCalibracion
    { Fl_Counter* o = CounterVelocidadSalto = new Fl_Counter(495, 220, 140, 30, "Velocidad salto (mm/s)");
      CounterVelocidadSalto->box(FL_FLAT_BOX);
      CounterVelocidadSalto->color((Fl_Color)48);
      CounterVelocidadSalto->labelsize(12);
      CounterVelocidadSalto->minimum(100);
      CounterVelocidadSalto->maximum(50000);
      CounterVelocidadSalto->step(10);
      CounterVelocidadSalto->textfont(13);
      CounterVelocidadSalto->textsize(12);
      CounterVelocidadSalto->callback((Fl_Callback*)cb_CounterVelocidadSalto);
      CounterVelocidadSalto->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterVelocidadSalto->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(VelocidadSalto);
      o->lstep(100.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Velocidad salto (mm/s)");break; case ING:o->label("Jump speed (mm/s)");break; case ITA:o->label("Velocità salto (mm/s)");break;}
    } // Fl_Counter* CounterVelocidadSalto
    { Fl_Counter* o = CounterRetardoSalto = new Fl_Counter(495, 270, 140, 30, "Retardo salto (us)");
      CounterRetardoSalto->box(FL_FLAT_BOX);
      CounterRetardoSalto->color((Fl_Color)48);
      CounterRetardoSalto->labelsize(12);
      CounterRetardoSalto->minimum(0);
      CounterRetardoSalto->maximum(100000);
      CounterRetardoSalto->step(1);
      CounterRetardoSalto->textfont(13);
      CounterRetardoSalto->textsize(12);
      CounterRetardoSalto->callback((Fl_Callback*)cb_CounterRetardoSalto);
      CounterRetardoSalto->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoSalto->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoSalto);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo salto (us)");break; case ING:o->label("Jump delay (us)");break; case ITA:o->label("Ritardo salto (us)");break;}
    } // Fl_Counter* CounterRetardoSalto
    { Fl_Counter* o = CounterRetardoPoligono = new Fl_Counter(495, 320, 140, 30, "Retardo pol\355gono (us)");
      CounterRetardoPoligono->box(FL_FLAT_BOX);
      CounterRetardoPoligono->color((Fl_Color)48);
      CounterRetardoPoligono->labelsize(12);
      CounterRetardoPoligono->minimum(0);
      CounterRetardoPoligono->maximum(100000);
      CounterRetardoPoligono->step(1);
      CounterRetardoPoligono->textfont(13);
      CounterRetardoPoligono->textsize(12);
      CounterRetardoPoligono->callback((Fl_Callback*)cb_CounterRetardoPoligono);
      CounterRetardoPoligono->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoPoligono->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoPoligono);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo polígono (us)");break; case ING:o->label("Poligon delay (us)");break; case ITA:o->label("Ritardo poligono (us)");break;}
    } // Fl_Counter* CounterRetardoPoligono
    { Fl_Counter* o = CounterRetardoMarcaje = new Fl_Counter(495, 370, 140, 30, "Retardo marcaje (us)");
      CounterRetardoMarcaje->box(FL_FLAT_BOX);
      CounterRetardoMarcaje->color((Fl_Color)48);
      CounterRetardoMarcaje->labelsize(12);
      CounterRetardoMarcaje->minimum(0);
      CounterRetardoMarcaje->maximum(100000);
      CounterRetardoMarcaje->step(1);
      CounterRetardoMarcaje->textfont(13);
      CounterRetardoMarcaje->textsize(12);
      CounterRetardoMarcaje->callback((Fl_Callback*)cb_CounterRetardoMarcaje);
      CounterRetardoMarcaje->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoMarcaje->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoMarcaje);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo marcaje (us)");break; case ING:o->label("Mark delay (us)");break; case ITA:o->label("Ritardo marcatura (us)");break;}
    } // Fl_Counter* CounterRetardoMarcaje
    { Fl_Counter* o = CounterControlGalvos = new Fl_Counter(650, 270, 140, 30, "Control galvos (V)");
      CounterControlGalvos->box(FL_FLAT_BOX);
      CounterControlGalvos->color((Fl_Color)9);
      CounterControlGalvos->selection_color((Fl_Color)9);
      CounterControlGalvos->labelsize(12);
      CounterControlGalvos->minimum(0.1);
      CounterControlGalvos->maximum(10);
      CounterControlGalvos->step(0.1);
      CounterControlGalvos->textfont(13);
      CounterControlGalvos->textsize(12);
      CounterControlGalvos->callback((Fl_Callback*)cb_CounterControlGalvos);
      CounterControlGalvos->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterControlGalvos->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(VGalvoRef_MaximoBits);
      o->lstep(1.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Control galvos (V)");break; case ING:o->label("Galvo control (V)");break; case ITA:o->label("Galvos controllo (V)");break;}
    } // Fl_Counter* CounterControlGalvos
    { Fl_Choice* o = ChoiceValorActivacionGalvos = new Fl_Choice(650, 220, 140, 30, "Activaci\363n galvos");
      ChoiceValorActivacionGalvos->down_box(FL_DOWN_BOX);
      ChoiceValorActivacionGalvos->color((Fl_Color)9);
      ChoiceValorActivacionGalvos->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceValorActivacionGalvos->labelsize(12);
      ChoiceValorActivacionGalvos->textfont(13);
      ChoiceValorActivacionGalvos->textsize(12);
      ChoiceValorActivacionGalvos->callback((Fl_Callback*)cb_ChoiceValorActivacionGalvos);
      ChoiceValorActivacionGalvos->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceValorActivacionGalvos->when(FL_WHEN_RELEASE_ALWAYS);
      o->add("0"); o->add("1");//inicialización
      o->value(ValorActivacionGalvos);
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Activación Galvos");break; case ING:o->label("Galvos Activation");break; case ITA:o->label("Attivazione Galvos");break;}
    } // Fl_Choice* ChoiceValorActivacionGalvos
    { Fl_Choice* o = ChoiceOrientacion = new Fl_Choice(10, 70, 140, 30, "Orientaci\363n");
      ChoiceOrientacion->down_box(FL_DOWN_BOX);
      ChoiceOrientacion->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceOrientacion->labelsize(12);
      ChoiceOrientacion->textfont(13);
      ChoiceOrientacion->textsize(12);
      ChoiceOrientacion->callback((Fl_Callback*)cb_ChoiceOrientacion);
      ChoiceOrientacion->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceOrientacion->when(FL_WHEN_RELEASE_ALWAYS);
      o->add("0"); o->add("90"); o->add("180"); o->add("270");//inicialización
      switch (Orientacion) {case 0:o->value(0);break; case 90:o->value(1);break; case 180:o->value(2);break; case 270:o->value(3);break;}
      switch (Idioma) {case ESP:o->label("Orientación");break; case ING:o->label("Orientation");break; case ITA:o->label("Orientamento");break;}
    } // Fl_Choice* ChoiceOrientacion
    { Fl_Choice* o = ChoiceAvance = new Fl_Choice(10, 120, 140, 30, "Avance");
      ChoiceAvance->down_box(FL_DOWN_BOX);
      ChoiceAvance->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceAvance->labelsize(12);
      ChoiceAvance->textsize(12);
      ChoiceAvance->callback((Fl_Callback*)cb_ChoiceAvance);
      ChoiceAvance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceAvance->when(FL_WHEN_RELEASE_ALWAYS);
      o->add("0"); o->add("90"); o->add("180"); o->add("270");//inicialización
      switch (Avance) {case 0:o->value(0);break; case 90:o->value(1);break; case 180:o->value(2);break; case 270:o->value(3);break;}
      switch (Idioma) {case ESP:o->label("Avance");break; case ING:o->label("Progress");break; case ITA:o->label("Avanzamento");break;}
    } // Fl_Choice* ChoiceAvance
    { Fl_Choice* o = ChoiceDisparoFotocelula = new Fl_Choice(170, 270, 140, 30, "Valor Disparo");
      ChoiceDisparoFotocelula->down_box(FL_DOWN_BOX);
      ChoiceDisparoFotocelula->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceDisparoFotocelula->labelsize(12);
      ChoiceDisparoFotocelula->textfont(13);
      ChoiceDisparoFotocelula->textsize(12);
      ChoiceDisparoFotocelula->callback((Fl_Callback*)cb_ChoiceDisparoFotocelula);
      ChoiceDisparoFotocelula->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceDisparoFotocelula->when(FL_WHEN_RELEASE_ALWAYS);
      o->add("0"); o->add("1");//inicialización
      o->value(ValorDisparo);
      if (TipoDisparo == DISPAROEXTERNO) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Valor disparo");break; case ING:o->label("Trigger value");break; case ITA:o->label("Valore trigger");break;}
    } // Fl_Choice* ChoiceDisparoFotocelula
    { Fl_Counter* o = CounterRetardoDisparo = new Fl_Counter(170, 170, 140, 30, "Retardo disparo (mm)");
      CounterRetardoDisparo->box(FL_FLAT_BOX);
      CounterRetardoDisparo->color((Fl_Color)48);
      CounterRetardoDisparo->labelsize(12);
      CounterRetardoDisparo->minimum(0);
      CounterRetardoDisparo->maximum(1000);
      CounterRetardoDisparo->step(1);
      CounterRetardoDisparo->textfont(13);
      CounterRetardoDisparo->textsize(12);
      CounterRetardoDisparo->callback((Fl_Callback*)cb_CounterRetardoDisparo);
      CounterRetardoDisparo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterRetardoDisparo->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(RetardoDisparo);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (TipoDisparo == DISPAROEXTERNO) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Retardo disparo (mm)");break; case ING:o->label("trigger delay (mm)");break; case ITA:o->label("Ritardo trigger (mm)");break;}
    } // Fl_Counter* CounterRetardoDisparo
    { Fl_Counter* o = CounterLecturasConsecutivas = new Fl_Counter(170, 220, 140, 30, "Lecturas consecutivas");
      CounterLecturasConsecutivas->box(FL_FLAT_BOX);
      CounterLecturasConsecutivas->color((Fl_Color)48);
      CounterLecturasConsecutivas->labelsize(12);
      CounterLecturasConsecutivas->minimum(1);
      CounterLecturasConsecutivas->maximum(1000);
      CounterLecturasConsecutivas->step(1);
      CounterLecturasConsecutivas->value(1);
      CounterLecturasConsecutivas->textfont(13);
      CounterLecturasConsecutivas->textsize(12);
      CounterLecturasConsecutivas->callback((Fl_Callback*)cb_CounterLecturasConsecutivas);
      CounterLecturasConsecutivas->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterLecturasConsecutivas->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinimoLecturasConsecutivas);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (TipoDisparo == DISPAROEXTERNO) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Lecturas consecutivas");break; case ING:o->label("Consecutive readings");break; case ITA:o->label("Letture consecutive");break;}
    } // Fl_Counter* CounterLecturasConsecutivas
    { Fl_Counter* o = CounterSeparacionEntreDisparos = new Fl_Counter(170, 120, 140, 30, "Separaci\363n (mm)");
      CounterSeparacionEntreDisparos->box(FL_FLAT_BOX);
      CounterSeparacionEntreDisparos->color((Fl_Color)48);
      CounterSeparacionEntreDisparos->labelsize(12);
      CounterSeparacionEntreDisparos->minimum(1);
      CounterSeparacionEntreDisparos->maximum(10000);
      CounterSeparacionEntreDisparos->step(1);
      CounterSeparacionEntreDisparos->value(1);
      CounterSeparacionEntreDisparos->textfont(13);
      CounterSeparacionEntreDisparos->textsize(12);
      CounterSeparacionEntreDisparos->callback((Fl_Callback*)cb_CounterSeparacionEntreDisparos);
      CounterSeparacionEntreDisparos->align(Fl_Align(133));
      CounterSeparacionEntreDisparos->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(SeparacionEntreDisparos_mm); //inicialización
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (TipoDisparo == DISPAROEXTERNO) {o->deactivate();} else {o->activate();}
      switch (Idioma) {case ESP:o->label("Separación (mm)");break; case ING:o->label("Separation (mm)");break; case ITA:o->label("Separazione (mm)");break;}
    } // Fl_Counter* CounterSeparacionEntreDisparos
    { Fl_Choice* o = ChoiceTipoDisparo = new Fl_Choice(170, 70, 140, 30, "Tipo disparo");
      ChoiceTipoDisparo->down_box(FL_DOWN_BOX);
      ChoiceTipoDisparo->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceTipoDisparo->labelsize(12);
      ChoiceTipoDisparo->textfont(13);
      ChoiceTipoDisparo->textsize(12);
      ChoiceTipoDisparo->callback((Fl_Callback*)cb_ChoiceTipoDisparo);
      ChoiceTipoDisparo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceTipoDisparo->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresTipoDisparo[Idioma][i]);}//inicialización
      o->value(TipoDisparo);
      switch (Idioma) {case ESP:o->label("Tipo disparo");break; case ING:o->label("Trigger type");break; case ITA:o->label("Tipo trigger");break;}
    } // Fl_Choice* ChoiceTipoDisparo
    { Fl_Choice* o = ChoiceMarcajeDinamico = new Fl_Choice(10, 320, 140, 30, "Marcaje din\341mico");
      ChoiceMarcajeDinamico->down_box(FL_DOWN_BOX);
      ChoiceMarcajeDinamico->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceMarcajeDinamico->labelsize(12);
      ChoiceMarcajeDinamico->textfont(13);
      ChoiceMarcajeDinamico->textsize(12);
      ChoiceMarcajeDinamico->callback((Fl_Callback*)cb_ChoiceMarcajeDinamico);
      ChoiceMarcajeDinamico->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceMarcajeDinamico->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<3; i++) {o->add(ValoresDinamico[Idioma][i]);}//inicialización
      o->value(MarcajeDinamicoActivo);
      switch (Idioma) {case ESP:o->label("Marcaje dinámico");break; case ING:o->label("Dynamic marking");break; case ITA:o->label("Marcatura dinamica");break;}
    } // Fl_Choice* ChoiceMarcajeDinamico
    { Fl_Counter* o = CounterEncoder = new Fl_Counter(10, 370, 140, 30, "Encoder (cuentas/mm)");
      CounterEncoder->box(FL_FLAT_BOX);
      CounterEncoder->color((Fl_Color)48);
      CounterEncoder->labelsize(12);
      CounterEncoder->minimum(1);
      CounterEncoder->maximum(10000);
      CounterEncoder->step(0.1);
      CounterEncoder->textfont(13);
      CounterEncoder->textsize(12);
      CounterEncoder->callback((Fl_Callback*)cb_CounterEncoder);
      CounterEncoder->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterEncoder->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(CalibracionEncoder);
      if (MarcajeDinamicoActivo != 1) {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Encoder (cuentas/mm)");break; case ING:o->label("Encoder (counts/mm)");break; case ITA:o->label("Encoder (conta/mm)");break;}
    } // Fl_Counter* CounterEncoder
    { Fl_Counter* o = CounterVelocidadLinea = new Fl_Counter(10, 420, 140, 30, "Velocidad l\355nea (m/min)");
      CounterVelocidadLinea->box(FL_FLAT_BOX);
      CounterVelocidadLinea->color((Fl_Color)48);
      CounterVelocidadLinea->labelsize(12);
      CounterVelocidadLinea->minimum(0.1);
      CounterVelocidadLinea->maximum(1000);
      CounterVelocidadLinea->step(0.1);
      CounterVelocidadLinea->textfont(13);
      CounterVelocidadLinea->textsize(12);
      CounterVelocidadLinea->callback((Fl_Callback*)cb_CounterVelocidadLinea);
      CounterVelocidadLinea->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterVelocidadLinea->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(VelocidadLinea);
      if (MarcajeDinamicoActivo != 2) {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Velocidad línea (m/min)");break; case ING:o->label("Line speed (m/min)");break; case ITA:o->label("Velocità linea (m/min)");break;}
    } // Fl_Counter* CounterVelocidadLinea
    { Fl_Choice* o = ChoiceIdioma = new Fl_Choice(330, 120, 140, 30, "Idioma");
      ChoiceIdioma->down_box(FL_DOWN_BOX);
      ChoiceIdioma->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceIdioma->labelsize(12);
      ChoiceIdioma->textfont(13);
      ChoiceIdioma->textsize(12);
      ChoiceIdioma->callback((Fl_Callback*)cb_ChoiceIdioma);
      ChoiceIdioma->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceIdioma->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<3; i++) {o->add(ValoresIdioma[Idioma][i]);}//inicialización
      o->value(Idioma);
      switch (Idioma) {case ESP:o->label("Idioma");break; case ING:o->label("Language");break; case ITA:o->label("Lingua");break;}
    } // Fl_Choice* ChoiceIdioma
    { Fl_Button* o = BotonCambiarFechaHora = new Fl_Button(330, 475, 140, 30, "Fecha y hora");
      BotonCambiarFechaHora->box(FL_PLASTIC_THIN_UP_BOX);
      BotonCambiarFechaHora->down_box(FL_PLASTIC_THIN_DOWN_BOX);
      BotonCambiarFechaHora->color(FL_DARK1);
      BotonCambiarFechaHora->labelsize(12);
      BotonCambiarFechaHora->callback((Fl_Callback*)cb_BotonCambiarFechaHora);
      BotonCambiarFechaHora->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      switch (Idioma) {case ESP:o->label("Fecha y hora");break; case ING:o->label("Date and time");break; case ITA:o->label("Data e ora");break;}
    } // Fl_Button* BotonCambiarFechaHora
    { Fl_Counter* o = CounterPeriodoRT = new Fl_Counter(650, 120, 140, 30, "Periodo RT (us)");
      CounterPeriodoRT->box(FL_FLAT_BOX);
      CounterPeriodoRT->color((Fl_Color)9);
      CounterPeriodoRT->selection_color((Fl_Color)9);
      CounterPeriodoRT->labelsize(12);
      CounterPeriodoRT->minimum(10);
      CounterPeriodoRT->maximum(100000);
      CounterPeriodoRT->step(1);
      CounterPeriodoRT->textfont(13);
      CounterPeriodoRT->textsize(12);
      CounterPeriodoRT->callback((Fl_Callback*)cb_CounterPeriodoRT);
      CounterPeriodoRT->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterPeriodoRT->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(PERIODO_MICROSEGUNDOS);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Periodo RT (us)");break; case ING:o->label("RT Period (us)");break; case ITA:o->label("Periodo RT (us)");break;}
    } // Fl_Counter* CounterPeriodoRT
    { Fl_Choice* o = ChoiceExtractor = new Fl_Choice(330, 270, 140, 30, "Extractor");
      ChoiceExtractor->down_box(FL_DOWN_BOX);
      ChoiceExtractor->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceExtractor->labelsize(12);
      ChoiceExtractor->textfont(13);
      ChoiceExtractor->textsize(12);
      ChoiceExtractor->callback((Fl_Callback*)cb_ChoiceExtractor);
      ChoiceExtractor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceExtractor->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(ExtractorActivado);
      switch (Idioma) {case ESP:o->label("Extractor");break; case ING:o->label("Extractor");break; case ITA:o->label("Aspirazione");break;}
    } // Fl_Choice* ChoiceExtractor
    { Fl_Choice* o = ChoiceServicioTecnico = new Fl_Choice(330, 70, 140, 30, "Servicio t\351""cnico");
      ChoiceServicioTecnico->down_box(FL_DOWN_BOX);
      ChoiceServicioTecnico->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceServicioTecnico->labelsize(12);
      ChoiceServicioTecnico->textfont(13);
      ChoiceServicioTecnico->textsize(12);
      ChoiceServicioTecnico->callback((Fl_Callback*)cb_ChoiceServicioTecnico);
      ChoiceServicioTecnico->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceServicioTecnico->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(ServicioTecnico);
      switch (Idioma) {case ESP:o->label("Servicio técnico");break; case ING:o->label("Technical service");break; case ITA:o->label("Servizio tecnica");break;}
    } // Fl_Choice* ChoiceServicioTecnico
    { Fl_Counter* o = CounterSpot = new Fl_Counter(495, 470, 140, 30, "Spot (micras)");
      CounterSpot->box(FL_FLAT_BOX);
      CounterSpot->color((Fl_Color)48);
      CounterSpot->labelsize(12);
      CounterSpot->minimum(1);
      CounterSpot->maximum(10000);
      CounterSpot->step(1);
      CounterSpot->textfont(13);
      CounterSpot->textsize(12);
      CounterSpot->callback((Fl_Callback*)cb_CounterSpot);
      CounterSpot->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterSpot->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(Spot);
      o->lstep(10.0); // fija el incremento de la flecha doble del contador
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Spot (micras)");break; case ING:o->label("Spot (microns)");break; case ITA:o->label("Spot (microns)");break;}
    } // Fl_Counter* CounterSpot
    { Fl_Button* o = BotonImportarGraficos = new Fl_Button(330, 440, 140, 30, "Importar gr\341""ficos");
      BotonImportarGraficos->box(FL_PLASTIC_THIN_UP_BOX);
      BotonImportarGraficos->down_box(FL_PLASTIC_THIN_DOWN_BOX);
      BotonImportarGraficos->color(FL_DARK1);
      BotonImportarGraficos->labelsize(12);
      BotonImportarGraficos->callback((Fl_Callback*)cb_BotonImportarGraficos);
      BotonImportarGraficos->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      switch (Idioma) {case ESP:o->label("Importar gráficos");break; case ING:o->label("Import graphics");break; case ITA:o->label("Importare logos");break;}
    } // Fl_Button* BotonImportarGraficos
    { Fl_Choice* o = ChoiceControlPuertoSerie = new Fl_Choice(330, 220, 140, 30, "Control Puerto Serie");
      ChoiceControlPuertoSerie->down_box(FL_DOWN_BOX);
      ChoiceControlPuertoSerie->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceControlPuertoSerie->labelsize(12);
      ChoiceControlPuertoSerie->textfont(13);
      ChoiceControlPuertoSerie->textsize(12);
      ChoiceControlPuertoSerie->callback((Fl_Callback*)cb_ChoiceControlPuertoSerie);
      ChoiceControlPuertoSerie->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceControlPuertoSerie->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(PuertoSerieActivo);
      switch (Idioma) {case ESP:o->label("Control Puerto Serie");break; case ING:o->label("Serial Port Control");break; case ITA:o->label("Controllo Porta Seriale");break;}
    } // Fl_Choice* ChoiceControlPuertoSerie
    { Fl_Choice* o = ChoiceCentrado = new Fl_Choice(10, 170, 140, 30, "Centrado");
      ChoiceCentrado->down_box(FL_DOWN_BOX);
      ChoiceCentrado->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceCentrado->labelsize(12);
      ChoiceCentrado->textfont(13);
      ChoiceCentrado->textsize(12);
      ChoiceCentrado->callback((Fl_Callback*)cb_ChoiceCentrado);
      ChoiceCentrado->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceCentrado->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(Centrado);
      switch (Idioma) {case ESP:o->label("Centrado");break; case ING:o->label("Centered");break; case ITA:o->label("Centrato");break;}
    } // Fl_Choice* ChoiceCentrado
    { Fl_Button* o = BotonAceptar = new Fl_Button(10, 520, 310, 45, "Aceptar");
      BotonAceptar->box(FL_PLASTIC_THIN_UP_BOX);
      BotonAceptar->down_box(FL_PLASTIC_THIN_DOWN_BOX);
      BotonAceptar->color((Fl_Color)2);
      BotonAceptar->selection_color(FL_BACKGROUND2_COLOR);
      BotonAceptar->labelsize(19);
      BotonAceptar->callback((Fl_Callback*)cb_BotonAceptar);
      BotonAceptar->when(FL_WHEN_RELEASE_ALWAYS);
      switch (Idioma) {case ESP:o->label("Aceptar");break; case ING:o->label("Accept");break; case ITA:o->label("Acettare");break;}
    } // Fl_Button* BotonAceptar
    { Fl_Button* o = BotonCancelar = new Fl_Button(480, 520, 310, 45, "Cancelar");
      BotonCancelar->box(FL_PLASTIC_THIN_UP_BOX);
      BotonCancelar->down_box(FL_PLASTIC_THIN_DOWN_BOX);
      BotonCancelar->color((Fl_Color)1);
      BotonCancelar->selection_color(FL_BACKGROUND2_COLOR);
      BotonCancelar->labelsize(19);
      BotonCancelar->callback((Fl_Callback*)cb_BotonCancelar);
      BotonCancelar->when(FL_WHEN_RELEASE_ALWAYS);
      switch (Idioma) {case ESP:o->label("Cancelar");break; case ING:o->label("Cancel");break; case ITA:o->label("Annulla");break;}
    } // Fl_Button* BotonCancelar
    { Fl_Choice* o = ChoiceReverso = new Fl_Choice(10, 220, 140, 30, "Impresi\363n en reverso");
      ChoiceReverso->down_box(FL_DOWN_BOX);
      ChoiceReverso->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceReverso->labelsize(12);
      ChoiceReverso->textfont(13);
      ChoiceReverso->textsize(12);
      ChoiceReverso->callback((Fl_Callback*)cb_ChoiceReverso);
      ChoiceReverso->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceReverso->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(Reverso);
      switch (Idioma) {case ESP:o->label("Impresión en reverso");break; case ING:o->label("Back printing");break; case ITA:o->label("Reversi");break;}
    } // Fl_Choice* ChoiceReverso
    { Fl_Box* o = new Fl_Box(10, 576, 780, 24, "Itaca Config  -  Fotonica Laser Systems");
      o->labelfont(10);
      o->labelsize(12);
      o->labelcolor(FL_INACTIVE_COLOR);
    } // Fl_Box* o
    { Fl_Choice* o = ChoiceControlEstrategia = new Fl_Choice(330, 170, 140, 30, "Estrategia de marcaje");
      ChoiceControlEstrategia->down_box(FL_DOWN_BOX);
      ChoiceControlEstrategia->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceControlEstrategia->labelsize(12);
      ChoiceControlEstrategia->textfont(13);
      ChoiceControlEstrategia->textsize(12);
      ChoiceControlEstrategia->callback((Fl_Callback*)cb_ChoiceControlEstrategia);
      ChoiceControlEstrategia->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceControlEstrategia->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<4; i++) {o->add(ValoresEstrategia[Idioma][i]);}//inicialización
      o->value(Estrategia);
      switch (Idioma) {case ESP:o->label("Estrategia de marcaje");break; case ING:o->label("Marking strategy");break; case ITA:o->label("Marcatura strategia");break;}
    } // Fl_Choice* ChoiceControlEstrategia
    { Fl_Choice* o = ChoiceControl = new Fl_Choice(650, 70, 140, 30, "Sistema de Control");
      ChoiceControl->down_box(FL_DOWN_BOX);
      ChoiceControl->color((Fl_Color)9);
      ChoiceControl->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceControl->labelsize(12);
      ChoiceControl->textfont(13);
      ChoiceControl->textsize(12);
      ChoiceControl->callback((Fl_Callback*)cb_ChoiceControl);
      ChoiceControl->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceControl->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresControl[Idioma][i]);}//inicialización
      o->value(Control);
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Sistema de Control");break; case ING:o->label("Control System");break; case ITA:o->label("Sistema de Controllo");break;}
    } // Fl_Choice* ChoiceControl
    { Fl_Choice* o = ChoiceErrorCampo = new Fl_Choice(330, 320, 140, 30, "Error de campo");
      ChoiceErrorCampo->down_box(FL_DOWN_BOX);
      ChoiceErrorCampo->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceErrorCampo->labelsize(12);
      ChoiceErrorCampo->textfont(13);
      ChoiceErrorCampo->textsize(12);
      ChoiceErrorCampo->callback((Fl_Callback*)cb_ChoiceErrorCampo);
      ChoiceErrorCampo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceErrorCampo->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(ControlarErrorCampo);
      switch (Idioma) {case ESP:o->label("Error de campo");break; case ING:o->label("Field error");break; case ITA:o->label("Errore campo");break;}
    } // Fl_Choice* ChoiceErrorCampo
    { Fl_Choice* o = ChoiceErrorGalvos = new Fl_Choice(330, 370, 140, 30, "Error de galvos");
      ChoiceErrorGalvos->down_box(FL_DOWN_BOX);
      ChoiceErrorGalvos->selection_color(FL_BACKGROUND2_COLOR);
      ChoiceErrorGalvos->labelsize(12);
      ChoiceErrorGalvos->textfont(13);
      ChoiceErrorGalvos->textsize(12);
      ChoiceErrorGalvos->callback((Fl_Callback*)cb_ChoiceErrorGalvos);
      ChoiceErrorGalvos->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceErrorGalvos->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresActivacion[Idioma][i]);}//inicialización
      o->value(ControlarErrorGalvos);
      switch (Idioma) {case ESP:o->label("Error de galvos");break; case ING:o->label("Galvo error");break; case ITA:o->label("Errore galvos");break;}
    } // Fl_Choice* ChoiceErrorGalvos
    { Fl_Button* o = BotonTurnos = new Fl_Button(330, 405, 140, 30, "Editar turnos");
      BotonTurnos->box(FL_PLASTIC_THIN_UP_BOX);
      BotonTurnos->down_box(FL_PLASTIC_THIN_DOWN_BOX);
      BotonTurnos->color(FL_DARK1);
      BotonTurnos->labelsize(12);
      BotonTurnos->callback((Fl_Callback*)cb_BotonTurnos);
      BotonTurnos->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      switch (Idioma) {case ESP:o->label("Editar turnos");break; case ING:o->label("Edit shifts");break; case ITA:o->label("Edit turni");break;}
    } // Fl_Button* BotonTurnos
    { Fl_Choice* o = ChoiceTipoLaser = new Fl_Choice(650, 320, 140, 30, "Tipo de Laser");
      ChoiceTipoLaser->down_box(FL_DOWN_BOX);
      ChoiceTipoLaser->labelsize(12);
      ChoiceTipoLaser->textsize(12);
      ChoiceTipoLaser->callback((Fl_Callback*)cb_ChoiceTipoLaser);
      ChoiceTipoLaser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceTipoLaser->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresTipoLaser[Idioma][i]);}//inicialización
      o->value(TipoLaser);
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Tipo de Laser");break; case ING:o->label("Laser Type");break; case ITA:o->label("Tipo Laser");break;}
    } // Fl_Choice* ChoiceTipoLaser
    { Fl_Choice* o = ChoiceFicheroCorreccionActivo = new Fl_Choice(650, 370, 140, 30, "FicheroCorreccionActivo");
      ChoiceFicheroCorreccionActivo->down_box(FL_DOWN_BOX);
      ChoiceFicheroCorreccionActivo->labelsize(12);
      ChoiceFicheroCorreccionActivo->textsize(12);
      ChoiceFicheroCorreccionActivo->callback((Fl_Callback*)cb_ChoiceFicheroCorreccionActivo);
      ChoiceFicheroCorreccionActivo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      ChoiceFicheroCorreccionActivo->when(FL_WHEN_RELEASE_ALWAYS);
      int i; for (i=0; i<2; i++) {o->add(ValoresFicheroCorreccionActivo[Idioma][i]);}//inicialización
      o->value(FicheroCorreccionActivo);
      if (ConfigAvanzada) {o->activate();} else {o->deactivate();}
      switch (Idioma) {case ESP:o->label("Fichero Correccion");break; case ING:o->label("Correction File");break; case ITA:o->label("Fichero Correzzione");break;}
    } // Fl_Choice* ChoiceFicheroCorreccionActivo
    VentanaConfiguracion->set_modal();
    VentanaConfiguracion->clear_border();
    VentanaConfiguracion->size_range(0, 0, 800, 600);
    VentanaConfiguracion->end();
  } // Fl_Double_Window* VentanaConfiguracion
  return VentanaConfiguracion;
}

Fl_Double_Window *VentanaPassword=(Fl_Double_Window *)0;

static void cb_VentanaPassword(Fl_Double_Window* o, void*) {
  VentanaConfiguracion->hide();
o->show();
}

Fl_Output *CuadroTextoPassword=(Fl_Output *)0;

Fl_Group *GrupoTeclado=(Fl_Group *)0;

Fl_Button *Boton1p=(Fl_Button *)0;

static void cb_Boton1p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "1");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton2p=(Fl_Button *)0;

static void cb_Boton2p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "2");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton3p=(Fl_Button *)0;

static void cb_Boton3p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "3");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton4p=(Fl_Button *)0;

static void cb_Boton4p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "4");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton5p=(Fl_Button *)0;

static void cb_Boton5p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "5");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton6p=(Fl_Button *)0;

static void cb_Boton6p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "6");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton7p=(Fl_Button *)0;

static void cb_Boton7p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "7");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton8p=(Fl_Button *)0;

static void cb_Boton8p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "8");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton9p=(Fl_Button *)0;

static void cb_Boton9p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "9");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Boton0p=(Fl_Button *)0;

static void cb_Boton0p(Fl_Button*, void*) {
  char txt[25];

// concatena el nuevo carácter en la password
strcat(Password, "0");

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// concatena un asterisco para mostrar
strcat(txt, "*");

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *BotonBorrarp=(Fl_Button *)0;

static void cb_BotonBorrarp(Fl_Button*, void*) {
  char txt[25];

// adelanta el carácter de fin de string un carácter, para borrar el último de la password
Password[strlen(Password) - 1] = '\0';

// duplica el texto actual en una nueva variable
strcpy(txt, CuadroTextoPassword->value());

// adelanta el carácter de fin de string un carácter, para borrar el último
txt[strlen(txt) - 1] = '\0';

// asigna el nuevo texto al cuadro de texto
CuadroTextoPassword->value(txt);
}

Fl_Button *Cancelar_VentanaPassword=(Fl_Button *)0;

static void cb_Cancelar_VentanaPassword(Fl_Button*, void*) {
  // Vacía el cuadro de texto, para evitar líos...
CuadroTextoPassword->value("");

// Oculta la ventana emergente actual
VentanaPassword->hide();

// Y vuelve a presentar la ventana principal
VentanaConfiguracion->activate();
VentanaConfiguracion->cursor(FL_CURSOR_DEFAULT);
}

Fl_Button *Aceptar_VentanaPassword=(Fl_Button *)0;

static void cb_Aceptar_VentanaPassword(Fl_Button* o, void*) {
  // Si la contraseña es correcta sale del programa guardando los cambios
if (!strcmp(Password, PasswordConfiguracion)) {

	// guarda los datos modificados en /root/itaca/itaca.conf
	escribir_configuracion();

	// actualiza el disco
	system("mount / -o rw,remount");
	system("cp /root/itaca/itaca.conf /rootFLS/itaca/itaca.conf");
	system("mount / -o ro,remount");

	// sale del programa	
	exit(0);
	
}

// Si no, da un mensaje y vacía el cuadro de texto
else {

	// Asigna el mensaje
	switch (Idioma) {
			
		case ESP:
		BoxVentanaMensaje->label("Contraseña incorrecta");
		break; 
			
		case ING:
		BoxVentanaMensaje->label("Wrong password");
		break; 
			
		case ITA:
		BoxVentanaMensaje->label("Password errata");
		break;
			
	}
	
	// Desactiva la ventana actual para que resalte la ventana emergente que saldrá a continuación
	VentanaPassword->deactivate();
	
	// Presenta la ventana con el mensaje emergente
	VentanaMensaje->show();
	
	// Vacía el cuadro de texto, para evitar líos...
	CuadroTextoPassword->value("");
	
	// Y la password
	strcpy(Password, "");

};
}

Fl_Double_Window* Make_Window_Password() {
  { VentanaPassword = new Fl_Double_Window(460, 460);
    VentanaPassword->box(FL_BORDER_BOX);
    VentanaPassword->color(FL_WHITE);
    VentanaPassword->selection_color(FL_BACKGROUND2_COLOR);
    VentanaPassword->callback((Fl_Callback*)cb_VentanaPassword);
    VentanaPassword->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Output* o = CuadroTextoPassword = new Fl_Output(50, 42, 355, 40, "Contrase\361""a:");
      CuadroTextoPassword->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoPassword->color((Fl_Color)175);
      CuadroTextoPassword->labelfont(8);
      CuadroTextoPassword->labelsize(20);
      CuadroTextoPassword->textsize(24);
      CuadroTextoPassword->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      switch (Idioma) {case ESP:o->label("Contraseña:");break; case ING:o->label("Password:");break; case ITA:o->label("Password:");break;}
    } // Fl_Output* CuadroTextoPassword
    { GrupoTeclado = new Fl_Group(50, 95, 355, 240);
      GrupoTeclado->box(FL_PLASTIC_UP_FRAME);
      GrupoTeclado->color(FL_FOREGROUND_COLOR);
      { Boton1p = new Fl_Button(150, 215, 50, 50, "1");
        Boton1p->box(FL_PLASTIC_UP_BOX);
        Boton1p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton1p->color(FL_INACTIVE_COLOR);
        Boton1p->labelsize(20);
        Boton1p->callback((Fl_Callback*)cb_Boton1p);
      } // Fl_Button* Boton1p
      { Boton2p = new Fl_Button(200, 215, 50, 50, "2");
        Boton2p->box(FL_PLASTIC_UP_BOX);
        Boton2p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton2p->color(FL_INACTIVE_COLOR);
        Boton2p->labelsize(20);
        Boton2p->callback((Fl_Callback*)cb_Boton2p);
      } // Fl_Button* Boton2p
      { Boton3p = new Fl_Button(250, 215, 50, 50, "3");
        Boton3p->box(FL_PLASTIC_UP_BOX);
        Boton3p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton3p->color(FL_INACTIVE_COLOR);
        Boton3p->labelsize(20);
        Boton3p->callback((Fl_Callback*)cb_Boton3p);
      } // Fl_Button* Boton3p
      { Boton4p = new Fl_Button(150, 165, 50, 50, "4");
        Boton4p->box(FL_PLASTIC_UP_BOX);
        Boton4p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton4p->color(FL_INACTIVE_COLOR);
        Boton4p->labelsize(20);
        Boton4p->callback((Fl_Callback*)cb_Boton4p);
      } // Fl_Button* Boton4p
      { Boton5p = new Fl_Button(200, 165, 50, 50, "5");
        Boton5p->box(FL_PLASTIC_UP_BOX);
        Boton5p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton5p->color(FL_INACTIVE_COLOR);
        Boton5p->labelsize(20);
        Boton5p->callback((Fl_Callback*)cb_Boton5p);
      } // Fl_Button* Boton5p
      { Boton6p = new Fl_Button(250, 165, 50, 50, "6");
        Boton6p->box(FL_PLASTIC_UP_BOX);
        Boton6p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton6p->color(FL_INACTIVE_COLOR);
        Boton6p->labelsize(20);
        Boton6p->callback((Fl_Callback*)cb_Boton6p);
      } // Fl_Button* Boton6p
      { Boton7p = new Fl_Button(150, 115, 50, 50, "7");
        Boton7p->box(FL_PLASTIC_UP_BOX);
        Boton7p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton7p->color(FL_INACTIVE_COLOR);
        Boton7p->labelsize(20);
        Boton7p->callback((Fl_Callback*)cb_Boton7p);
      } // Fl_Button* Boton7p
      { Boton8p = new Fl_Button(200, 115, 50, 50, "8");
        Boton8p->box(FL_PLASTIC_UP_BOX);
        Boton8p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton8p->color(FL_INACTIVE_COLOR);
        Boton8p->labelsize(20);
        Boton8p->callback((Fl_Callback*)cb_Boton8p);
      } // Fl_Button* Boton8p
      { Boton9p = new Fl_Button(250, 115, 50, 50, "9");
        Boton9p->box(FL_PLASTIC_UP_BOX);
        Boton9p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton9p->color(FL_INACTIVE_COLOR);
        Boton9p->labelsize(20);
        Boton9p->callback((Fl_Callback*)cb_Boton9p);
      } // Fl_Button* Boton9p
      { Boton0p = new Fl_Button(150, 265, 50, 50, "0");
        Boton0p->box(FL_PLASTIC_UP_BOX);
        Boton0p->down_box(FL_PLASTIC_DOWN_BOX);
        Boton0p->color(FL_INACTIVE_COLOR);
        Boton0p->labelsize(20);
        Boton0p->callback((Fl_Callback*)cb_Boton0p);
      } // Fl_Button* Boton0p
      { Fl_Button* o = BotonBorrarp = new Fl_Button(200, 265, 100, 50, "Borrar");
        BotonBorrarp->box(FL_PLASTIC_UP_BOX);
        BotonBorrarp->down_box(FL_PLASTIC_DOWN_BOX);
        BotonBorrarp->color(FL_INACTIVE_COLOR);
        BotonBorrarp->labelsize(17);
        BotonBorrarp->callback((Fl_Callback*)cb_BotonBorrarp);
        switch (Idioma) {case ESP:o->label("Borrar");break; case ING:o->label("Delete");break; case ITA:o->label("Eliminare");break;}
      } // Fl_Button* BotonBorrarp
      GrupoTeclado->end();
    } // Fl_Group* GrupoTeclado
    { Fl_Button* o = Cancelar_VentanaPassword = new Fl_Button(270, 360, 135, 75, "Cancelar");
      Cancelar_VentanaPassword->box(FL_PLASTIC_UP_BOX);
      Cancelar_VentanaPassword->down_box(FL_PLASTIC_DOWN_BOX);
      Cancelar_VentanaPassword->color(FL_FOREGROUND_COLOR);
      Cancelar_VentanaPassword->labelfont(8);
      Cancelar_VentanaPassword->labelsize(20);
      Cancelar_VentanaPassword->callback((Fl_Callback*)cb_Cancelar_VentanaPassword);
      switch (Idioma) {case ESP:o->label("Cancelar");break; case ING:o->label("Cancel");break; case ITA:o->label("Cancellare");break;}
    } // Fl_Button* Cancelar_VentanaPassword
    { Fl_Button* o = Aceptar_VentanaPassword = new Fl_Button(50, 360, 135, 75, "Aceptar");
      Aceptar_VentanaPassword->box(FL_PLASTIC_UP_BOX);
      Aceptar_VentanaPassword->down_box(FL_PLASTIC_DOWN_BOX);
      Aceptar_VentanaPassword->color(FL_FOREGROUND_COLOR);
      Aceptar_VentanaPassword->labelfont(8);
      Aceptar_VentanaPassword->labelsize(20);
      Aceptar_VentanaPassword->callback((Fl_Callback*)cb_Aceptar_VentanaPassword);
      switch (Idioma) {case ESP:o->label("Aceptar");break; case ING:o->label("Accept");break; case ITA:o->label("Acettare");break;}
    } // Fl_Button* Aceptar_VentanaPassword
    VentanaPassword->set_modal();
    VentanaPassword->clear_border();
    VentanaPassword->size_range(460, 460, 460, 460);
    VentanaPassword->end();
  } // Fl_Double_Window* VentanaPassword
  return VentanaPassword;
}

Fl_Double_Window *VentanaMensaje=(Fl_Double_Window *)0;

Fl_Box *BoxVentanaMensaje=(Fl_Box *)0;

Fl_Button *Aceptar_VentanaMensaje=(Fl_Button *)0;

static void cb_Aceptar_VentanaMensaje(Fl_Button*, void*) {
  // Oculta la ventana emergente actual
VentanaMensaje->hide();

// Y vuelve a presentar la ventana activa desde donde se invocó el mensaje
VentanaPassword->activate();
}

Fl_Double_Window* Make_Window_Mensaje() {
  { VentanaMensaje = new Fl_Double_Window(475, 230);
    VentanaMensaje->box(FL_NO_BOX);
    VentanaMensaje->color((Fl_Color)1);
    VentanaMensaje->selection_color((Fl_Color)1);
    VentanaMensaje->labelfont(8);
    VentanaMensaje->labelcolor(FL_BACKGROUND2_COLOR);
    { Fl_Group* o = new Fl_Group(0, 0, 475, 230);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)94);
      { BoxVentanaMensaje = new Fl_Box(10, 20, 450, 70);
        BoxVentanaMensaje->labelfont(8);
        BoxVentanaMensaje->labelsize(20);
        BoxVentanaMensaje->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
      } // Fl_Box* BoxVentanaMensaje
      { Fl_Button* o = Aceptar_VentanaMensaje = new Fl_Button(165, 120, 150, 75, "Aceptar");
        Aceptar_VentanaMensaje->box(FL_PLASTIC_UP_BOX);
        Aceptar_VentanaMensaje->color(FL_FOREGROUND_COLOR);
        Aceptar_VentanaMensaje->labelfont(8);
        Aceptar_VentanaMensaje->labelsize(20);
        Aceptar_VentanaMensaje->callback((Fl_Callback*)cb_Aceptar_VentanaMensaje);
        switch (Idioma) {case ESP:o->label("Aceptar");break; case ING:o->label("Accept");break; case ITA:o->label("Acettare");break;}
      } // Fl_Button* Aceptar_VentanaMensaje
      o->end();
    } // Fl_Group* o
    VentanaMensaje->set_modal();
    VentanaMensaje->clear_border();
    VentanaMensaje->end();
  } // Fl_Double_Window* VentanaMensaje
  return VentanaMensaje;
}

Fl_Double_Window *VentanaTurnos=(Fl_Double_Window *)0;

Fl_Box *LogoItacaVentanaTrabajos=(Fl_Box *)0;

#include <FL/Fl_Image.H>
static unsigned char idata_fls[] =
{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,252,
251,250,251,248,246,250,246,241,244,239,232,232,226,212,222,213,188,216,206,164,
208,200,142,196,191,114,198,199,102,197,206,94,180,196,80,154,179,58,135,167,44,
124,164,40,116,164,41,108,163,42,100,162,44,96,165,48,99,172,59,107,183,76,113,
192,90,115,199,99,111,198,101,107,194,104,107,191,109,110,189,118,113,186,124,
114,185,129,118,187,137,127,190,149,139,197,163,149,201,174,156,205,183,164,207,
190,174,210,198,181,212,204,190,216,211,202,221,218,212,227,225,225,235,235,233,
242,242,239,245,246,242,247,248,245,249,250,246,249,250,248,250,250,250,251,252,
252,252,253,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,250,246,245,246,235,230,237,219,209,219,189,166,208,165,122,200,149,83,
198,144,55,202,152,42,206,163,37,209,176,38,208,187,38,207,196,38,204,206,39,
194,206,40,181,204,41,170,201,44,162,202,50,154,202,56,147,202,62,142,203,68,
134,201,71,126,198,74,120,195,79,115,194,83,110,193,86,104,192,88,97,192,88,90,
191,87,86,191,89,83,191,94,80,191,97,77,192,103,76,193,110,75,194,117,72,191,
122,67,188,126,67,187,133,66,188,140,62,185,145,60,182,150,58,179,153,56,174,
156,58,173,162,65,178,174,71,177,178,76,159,166,91,161,171,119,177,190,132,177,
192,149,181,195,172,194,207,192,207,218,211,220,229,224,231,238,230,234,241,235,
238,243,241,243,247,245,246,248,251,251,251,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,251,
251,251,246,246,246,244,244,244,244,244,244,244,244,244,244,244,244,245,245,245,
251,251,251,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,254,254,247,239,238,238,213,208,221,172,156,204,122,87,203,101,43,213,110,
33,213,122,33,212,133,34,211,144,35,210,156,36,210,167,37,209,177,38,208,187,
38,204,193,42,202,203,55,198,207,71,188,204,85,185,204,106,189,209,132,195,213,
157,203,216,181,219,230,206,223,228,217,227,229,226,242,242,242,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,253,253,253,245,245,245,232,233,232,
222,226,223,217,229,220,212,234,220,195,220,206,172,204,188,165,207,188,157,210,
189,142,202,182,127,193,176,117,192,176,107,191,178,100,189,180,90,187,183,87,
186,187,82,178,186,72,165,179,67,157,179,61,147,176,60,141,176,59,135,177,59,
126,174,59,114,164,77,122,172,92,125,172,116,140,182,143,159,196,163,173,202,
189,194,217,206,209,227,219,221,235,229,229,239,238,238,243,248,247,249,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,251,251,251,227,227,227,192,192,192,165,165,165,148,148,148,143,143,143,
142,142,142,142,142,142,142,142,142,151,151,151,207,207,207,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,251,247,247,239,210,208,219,147,137,207,90,
65,213,76,33,215,86,31,215,99,32,214,110,33,213,122,33,212,133,34,212,144,36,
210,155,36,206,164,42,207,179,63,210,195,88,210,204,115,214,214,154,226,228,196,
234,236,227,250,250,248,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,250,250,
250,245,248,247,239,244,243,217,226,226,203,222,223,189,218,220,163,198,203,147,
192,202,128,177,193,114,168,191,100,155,186,87,142,181,74,127,175,64,115,172,61,
107,173,61,101,173,61,95,173,62,88,170,65,84,167,74,86,166,95,100,172,120,122,
182,148,146,194,175,172,208,197,193,220,214,210,228,227,224,234,243,242,245,253,
253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,242,242,242,183,183,183,104,104,104,42,42,42,9,
9,9,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,146,146,146,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,248,241,240,231,181,178,212,93,84,215,55,36,217,61,31,
216,74,30,215,86,31,215,99,32,214,110,33,213,122,33,209,133,37,206,149,57,211,
172,90,215,192,127,223,212,171,234,231,216,249,248,247,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,250,250,250,235,238,240,214,222,228,190,206,218,165,187,207,142,169,199,
122,150,191,103,132,182,82,110,176,66,91,168,62,82,170,62,76,170,62,71,170,64,
66,169,67,63,168,73,64,163,88,75,164,112,96,171,136,121,181,170,155,199,192,
180,211,213,205,224,235,231,238,250,250,251,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,243,243,243,157,157,157,50,50,50,3,3,3,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,18,18,18,146,146,146,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
249,244,243,229,173,169,215,76,67,216,43,31,218,49,30,217,61,31,216,74,30,215,
86,31,215,99,32,213,110,34,210,130,54,214,168,112,224,201,166,235,226,211,248,
247,244,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,250,250,251,232,234,238,
208,214,225,182,193,216,155,167,203,131,142,193,105,115,180,77,84,168,65,67,166,
67,63,168,74,64,167,80,64,167,86,64,166,91,64,165,98,66,163,107,74,161,131,100,
171,160,133,188,187,166,204,213,202,221,240,238,242,253,253,253,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,251,
251,178,178,178,38,38,38,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
18,18,18,146,146,146,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,237,207,205,213,91,84,
217,40,30,218,41,29,218,49,30,217,61,31,216,74,30,215,86,31,214,99,32,212,121,
56,222,184,150,241,234,226,253,252,252,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
249,249,250,233,234,239,210,212,228,184,186,215,157,157,202,126,123,186,97,88,
170,82,67,164,86,64,166,92,64,165,98,65,165,103,65,164,109,65,163,114,66,162,
123,75,162,144,101,172,170,136,187,199,178,207,233,227,235,253,252,253,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,232,232,232,67,67,67,1,
1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,146,146,
146,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,232,176,173,210,54,45,218,39,29,218,41,29,
218,50,30,217,61,31,216,74,30,215,86,31,213,101,38,213,151,107,246,241,237,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,244,244,247,226,225,236,205,202,224,175,170,206,140,
128,185,103,81,162,98,65,164,103,65,164,109,65,163,114,65,163,119,65,162,124,66,
161,129,69,159,143,87,164,164,118,177,193,163,198,230,224,231,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,172,172,172,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,9,9,9,34,34,34,43,43,43,44,44,44,44,44,44,59,59,59,165,165,165,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,234,168,165,213,45,36,218,39,29,218,41,29,218,49,30,217,
61,31,216,74,30,215,86,31,214,106,45,220,175,144,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,247,246,248,232,230,239,216,
210,229,176,164,200,133,107,173,111,71,161,114,65,163,119,65,162,123,66,161,129,
67,160,134,67,159,138,68,158,148,81,161,164,105,171,193,161,195,236,230,236,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,102,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,
154,154,154,212,212,212,220,220,220,220,220,220,220,220,220,222,222,222,240,240,
240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,231,174,171,209,51,42,218,39,29,218,41,29,
218,50,30,217,61,31,216,74,30,215,86,31,212,101,38,211,152,110,249,248,247,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,246,245,247,233,229,239,203,192,217,153,126,180,122,75,159,
124,66,161,129,67,160,134,67,159,139,67,159,143,67,158,147,67,156,156,79,160,
169,108,169,203,178,202,245,244,245,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,18,18,
18,150,150,150,246,246,246,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,239,215,214,215,100,93,216,
39,29,218,41,29,218,49,30,217,61,31,216,74,30,215,86,31,215,99,33,211,120,55,
221,187,157,250,249,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,251,252,244,242,
247,216,206,223,160,128,179,131,75,160,134,67,159,139,67,159,143,68,158,148,67,
157,153,68,157,156,69,154,158,80,153,177,127,171,227,216,225,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,
0,0,0,0,0,64,64,64,202,202,202,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,234,203,201,215,96,89,216,48,37,217,50,31,217,61,31,216,74,30,215,86,31,215,
99,32,214,110,33,208,125,45,207,162,108,230,217,200,248,245,240,252,251,249,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,255,250,249,251,212,200,218,157,114,173,142,75,
160,143,68,158,148,67,157,153,68,157,156,68,154,155,68,149,154,69,143,161,93,
149,205,179,199,248,245,247,255,255,255,255,255,255,255,255,255,255,255,255,65,
65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,242,228,228,217,146,141,213,86,70,215,76,48,214,
78,37,214,86,32,215,99,32,214,110,33,213,122,33,212,133,34,205,143,44,201,163,
84,212,195,148,234,229,207,246,244,234,250,250,247,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
250,251,249,248,250,248,254,254,253,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,243,
241,244,191,166,198,155,94,166,148,70,157,153,68,157,156,68,154,155,68,149,155,
68,143,154,68,138,156,82,138,198,164,188,244,239,242,254,254,254,255,255,255,
255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,186,186,186,228,228,228,
228,228,228,228,228,228,228,228,228,228,228,228,232,232,232,253,253,253,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,237,229,
227,221,180,171,213,138,115,213,118,77,212,114,58,210,115,45,210,121,35,212,133,
34,211,144,35,210,156,36,208,166,37,199,170,49,203,190,100,218,215,161,236,236,
206,242,243,225,243,244,234,247,248,243,251,251,250,254,254,254,255,255,255,252,
252,251,229,240,221,196,221,179,185,216,168,214,233,206,246,249,245,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,222,210,224,170,118,177,155,73,158,156,
68,154,155,68,149,155,68,143,154,68,138,153,68,132,155,82,133,200,168,190,245,
241,244,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,77,77,
77,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,118,118,118,243,243,243,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,240,232,228,222,195,180,216,171,137,213,157,101,
212,154,80,209,155,65,206,158,51,206,165,42,206,175,39,207,187,38,203,192,38,
196,197,59,196,203,98,196,207,126,204,216,154,211,223,174,220,232,194,228,237,
212,213,228,196,148,200,102,109,195,49,99,197,45,104,191,69,185,220,174,252,253,
252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,232,239,182,134,184,
158,78,156,155,68,149,155,68,143,154,68,138,153,68,132,152,69,127,157,88,133,
208,183,199,250,247,249,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,236,236,236,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,246,246,246,
212,212,212,196,196,196,196,196,196,196,196,196,211,211,211,246,246,246,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,254,246,244,242,230,222,210,224,208,
179,219,198,151,215,194,129,214,196,113,209,195,98,209,202,89,208,209,82,190,
199,69,178,196,63,170,198,62,159,194,61,153,191,74,158,195,101,144,194,85,122,
198,52,109,199,45,100,198,46,90,197,47,111,197,84,234,240,233,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,242,238,242,189,146,188,158,80,
152,155,68,143,154,68,138,153,68,132,152,69,127,151,69,122,161,100,138,225,211,
219,253,253,253,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,39,39,39,236,236,236,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,225,225,225,109,109,109,55,55,
55,55,55,55,55,55,55,106,106,106,224,224,224,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,249,249,
248,245,244,239,234,232,220,233,231,209,233,233,199,218,221,181,211,218,173,211,
221,170,209,224,167,205,225,165,192,217,155,145,201,81,119,199,46,109,199,45,
100,198,46,89,198,46,101,199,72,216,229,213,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,241,234,240,190,147,186,156,75,145,154,
68,138,153,69,133,152,69,127,151,69,122,150,69,120,177,134,160,246,242,245,65,
65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,
39,236,236,236,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,65,65,65,215,
215,215,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,251,
250,176,212,138,123,198,55,109,199,45,100,198,46,90,197,47,114,197,89,235,240,
233,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,254,254,235,225,233,179,126,171,153,69,138,153,68,132,152,69,127,151,69,122,
151,69,120,150,78,122,220,205,215,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,236,236,236,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,217,217,217,
69,69,69,0,0,0,0,0,0,0,0,0,65,65,65,215,215,215,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,224,235,212,156,205,112,110,191,
52,96,191,45,111,193,77,188,220,178,253,253,253,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,250,251,216,193,
212,160,91,147,153,68,132,152,69,127,151,69,122,151,69,120,150,69,119,183,148,
170,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,33,33,33,96,96,96,117,117,117,117,117,117,
117,117,117,117,117,117,117,117,117,138,138,138,244,244,244,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,252,252,252,239,239,239,206,206,206,192,
192,192,197,197,197,221,221,221,246,246,246,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,217,217,
217,69,69,69,0,0,0,0,0,0,0,0,0,65,65,65,216,216,216,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,235,235,
235,206,206,206,192,192,192,198,198,198,224,224,224,247,247,247,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,251,251,251,243,243,243,239,239,239,241,241,241,248,
248,248,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,252,253,252,231,241,222,200,224,
183,190,220,173,215,235,207,246,249,245,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,251,251,251,244,244,244,240,240,240,
239,239,239,241,241,241,246,246,246,253,253,253,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,234,
239,184,141,176,151,68,131,152,69,127,151,69,122,151,69,120,151,69,120,167,115,
148,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,67,67,67,194,194,194,237,237,237,237,237,
237,237,237,237,237,237,237,237,237,237,239,239,239,254,254,254,255,255,255,255,
255,255,255,255,255,238,238,238,173,173,173,98,98,98,55,55,55,37,37,37,33,33,33,
34,34,34,44,44,44,71,71,71,131,131,131,210,210,210,251,251,251,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,217,217,217,69,69,69,0,
0,0,0,0,0,0,0,0,54,54,54,178,178,178,210,210,210,210,210,210,210,210,210,210,
210,210,210,210,210,216,216,216,240,240,240,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,247,247,247,164,164,164,92,92,92,51,51,51,37,37,37,33,
33,33,35,35,35,44,44,44,73,73,73,133,133,133,215,215,215,253,253,253,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,234,234,234,157,157,157,
91,91,91,56,56,56,48,48,48,51,51,51,72,72,72,123,123,123,205,205,205,252,252,
252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,231,231,231,201,201,201,192,192,191,190,191,189,196,196,196,220,220,220,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,252,252,252,232,232,232,206,206,206,200,
200,200,200,200,200,200,200,200,200,200,200,215,215,215,249,249,249,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,251,251,251,212,212,212,144,144,
144,90,90,90,59,59,59,48,48,48,47,47,47,51,51,51,64,64,64,100,100,100,154,154,
154,221,221,221,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,252,252,252,208,182,202,153,80,134,152,69,127,151,69,122,151,69,
120,151,69,120,147,88,125,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,251,251,251,188,188,188,74,74,74,20,20,20,7,7,7,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,3,3,3,12,12,12,37,37,37,129,129,129,229,229,229,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,
0,0,6,6,6,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,58,58,58,180,
180,180,255,255,255,255,255,255,255,255,255,253,253,253,186,186,186,64,64,64,16,
16,16,6,6,6,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,12,12,12,32,32,32,126,126,126,
246,246,246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,172,172,172,51,51,51,15,15,
15,6,6,6,1,1,1,0,0,0,1,1,1,3,3,3,10,10,10,26,26,26,110,110,110,240,240,240,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,163,163,163,
45,45,45,21,21,21,21,21,21,26,26,26,116,116,116,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,233,233,233,
139,139,139,63,63,63,33,33,33,23,23,23,21,21,21,21,21,21,21,21,21,21,21,21,85,
85,85,230,230,230,255,255,255,255,255,255,255,255,255,253,253,253,217,217,217,
111,111,111,34,34,34,13,13,13,6,6,6,2,2,2,0,0,0,0,0,0,1,1,1,2,2,2,7,7,7,15,15,
15,45,45,45,141,141,141,235,235,235,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,226,212,223,169,111,154,152,69,127,151,69,122,151,
69,120,151,69,120,129,67,105,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,
209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,241,241,241,148,148,148,29,29,29,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,74,74,74,208,208,208,252,252,252,255,255,
255,255,255,255,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,173,173,173,255,255,255,255,255,255,
245,245,245,137,137,137,23,23,23,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,4,4,4,71,71,71,221,221,221,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,250,250,139,139,139,
9,9,9,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,61,61,61,
223,223,223,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,155,155,
155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,244,244,244,152,152,152,33,33,33,4,4,4,1,1,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,69,69,228,228,228,255,255,255,255,
255,255,251,251,251,194,194,194,51,51,51,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,10,10,10,101,101,101,220,220,220,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,238,233,237,182,136,169,151,69,
126,151,69,122,151,69,120,151,69,120,125,62,101,65,65,65,0,0,0,0,0,0,0,0,0,0,0,
0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,240,240,240,144,144,144,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,2,2,2,5,5,5,4,4,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,206,206,
206,253,253,253,255,255,255,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,173,173,173,255,255,255,
241,241,241,126,126,126,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,4,4,4,3,3,
3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,59,59,59,216,216,216,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,250,250,250,144,144,144,11,11,11,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,65,65,
65,224,224,224,255,255,255,255,255,255,255,255,255,255,255,255,155,155,155,26,
26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,224,224,224,93,93,93,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,69,69,69,228,228,228,255,255,255,252,252,252,196,196,
196,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,3,3,3,90,90,90,219,219,219,254,254,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,248,247,248,195,156,184,151,72,127,151,69,122,151,69,120,151,69,120,
128,64,103,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,249,249,249,174,174,174,28,28,
28,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,38,38,38,65,65,65,82,82,82,76,76,76,52,52,
52,26,26,26,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,231,231,231,255,255,255,255,
255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,44,44,44,175,175,175,249,249,249,157,157,157,32,32,32,0,0,0,0,0,0,0,
0,0,1,1,1,15,15,15,41,41,41,66,66,66,81,81,81,74,74,74,52,52,52,25,25,25,5,5,
5,0,0,0,0,0,0,0,0,0,7,7,7,88,88,88,231,231,231,255,255,255,255,255,255,255,
255,255,255,255,255,195,195,195,36,36,36,1,1,1,0,0,0,0,0,0,1,1,1,9,9,9,29,29,29,
40,40,40,37,37,37,19,19,19,3,3,3,0,0,0,0,0,0,0,0,0,12,12,12,115,115,115,247,
247,247,255,255,255,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,
6,6,103,103,103,255,255,255,255,255,255,255,255,255,255,255,255,226,226,226,
97,97,97,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,9,9,9,10,10,10,10,10,10,
10,10,10,76,76,76,229,229,229,255,255,255,227,227,227,67,67,67,0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,17,17,17,38,38,38,54,54,54,61,61,61,58,58,58,39,39,39,15,15,15,
1,1,1,0,0,0,0,0,0,0,0,0,4,4,4,125,125,125,238,238,238,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,253,253,196,164,187,147,73,124,151,69,122,151,69,120,151,69,120,148,
91,126,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,221,221,221,69,69,69,0,0,0,0,0,0,0,
0,0,2,2,2,36,36,36,113,113,113,200,200,200,250,250,250,255,255,255,253,253,
253,231,231,231,162,162,162,74,74,74,15,15,15,0,0,0,0,0,0,0,0,0,5,5,5,146,146,
146,255,255,255,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,19,19,19,79,
79,79,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,119,119,119,203,203,203,206,
206,206,68,68,68,2,2,2,0,0,0,0,0,0,0,0,0,39,39,39,122,122,122,206,206,206,250,
250,250,255,255,255,254,254,254,229,229,229,158,158,158,70,70,70,11,11,11,0,0,0,
0,0,0,0,0,0,23,23,23,144,144,144,250,250,250,255,255,255,255,255,255,247,247,
247,95,95,95,8,8,8,0,0,0,0,0,0,1,1,1,24,24,24,96,96,96,172,172,172,207,207,207,
196,196,196,137,137,137,53,53,53,6,6,6,0,0,0,0,0,0,0,0,0,43,43,43,198,198,198,
255,255,255,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,
103,103,255,255,255,255,255,255,255,255,255,242,242,242,132,132,132,21,21,21,0,
0,0,0,0,0,0,0,0,1,1,1,12,12,12,49,49,49,82,82,82,102,102,102,107,107,107,107,
107,107,107,107,107,147,147,147,239,239,239,254,254,254,143,143,143,1,1,1,0,0,0,
0,0,0,0,0,0,7,7,7,49,49,49,127,127,127,198,198,198,242,242,242,254,254,254,
249,249,249,202,202,202,119,119,119,38,38,38,2,2,2,0,0,0,0,0,0,0,0,0,24,24,24,
191,191,191,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,196,166,188,147,73,124,
151,69,122,151,69,120,151,69,120,177,135,161,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,
72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,250,250,
250,161,161,161,7,7,7,0,0,0,0,0,0,1,1,1,40,40,40,157,157,157,241,241,241,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,211,211,211,
98,98,98,15,15,15,0,0,0,0,0,0,0,0,0,39,39,39,240,240,240,255,255,255,217,217,
217,69,69,69,0,0,0,0,0,0,0,0,0,49,49,49,206,206,206,250,250,250,250,250,250,250,
250,250,250,250,250,250,250,250,251,251,251,246,246,246,138,138,138,17,17,17,0,
0,0,0,0,0,0,0,0,33,33,33,171,171,171,250,250,250,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,210,210,210,89,89,89,7,7,7,0,0,0,0,
0,0,2,2,2,71,71,71,219,219,219,255,255,255,255,255,255,209,209,209,47,47,47,0,
0,0,0,0,0,0,0,0,15,15,15,120,120,120,234,234,234,255,255,255,255,255,255,255,
255,255,252,252,252,186,186,186,48,48,48,2,2,2,0,0,0,0,0,0,17,17,17,129,129,129,
252,252,252,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,
103,103,255,255,255,255,255,255,254,254,254,189,189,189,53,53,53,0,0,0,0,0,0,0,
0,0,0,0,0,26,26,26,112,112,112,197,197,197,243,243,243,253,253,253,254,254,
254,254,254,254,254,254,254,254,254,254,255,255,255,244,244,244,43,43,43,0,0,0,
0,0,0,0,0,0,6,6,6,66,66,66,183,183,183,247,247,247,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,242,242,242,158,158,158,38,38,38,0,0,0,0,0,
0,0,0,0,0,0,0,115,115,115,245,245,245,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,250,251,196,160,
186,150,72,126,151,69,122,151,69,120,150,73,121,211,193,204,65,65,65,0,0,0,0,0,
0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,
255,255,241,241,241,81,81,81,0,0,0,0,0,0,0,0,0,18,18,18,134,134,134,238,238,238,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,205,205,205,70,70,70,3,3,3,0,0,0,0,0,0,0,0,0,182,182,182,255,
255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,50,50,50,210,210,210,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,221,221,87,87,
87,0,0,0,0,0,0,0,0,0,7,7,7,144,144,144,254,254,254,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,212,212,
50,50,50,0,0,0,0,0,0,0,0,0,33,33,33,164,164,164,255,255,255,255,255,255,164,
164,164,30,30,30,0,0,0,0,0,0,1,1,1,50,50,50,223,223,223,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,253,253,253,136,136,136,9,9,9,0,0,0,0,0,0,4,
4,4,87,87,87,241,241,241,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,
0,0,6,6,6,103,103,103,255,255,255,255,255,255,243,243,243,127,127,127,11,11,
11,0,0,0,0,0,0,0,0,0,10,10,10,139,139,139,241,241,241,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,204,204,
204,4,4,4,0,0,0,0,0,0,0,0,0,44,44,44,174,174,174,250,250,250,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,236,236,236,
123,123,123,10,10,10,0,0,0,0,0,0,0,0,0,51,51,51,239,239,239,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
242,240,242,188,145,177,152,70,127,151,69,122,151,69,120,164,110,144,242,237,
240,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,
255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,67,67,67,204,
204,204,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,249,249,249,137,137,137,21,21,21,0,0,0,0,0,
0,0,0,0,112,112,112,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,50,50,
50,210,210,210,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,188,188,188,48,48,48,0,0,0,0,0,0,0,0,0,55,55,55,229,229,229,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,253,253,253,142,142,142,0,0,0,0,0,0,0,0,0,10,10,10,120,120,120,
250,250,250,255,255,255,136,136,136,19,19,19,0,0,0,0,0,0,5,5,5,87,87,87,253,253,
253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,203,
203,203,18,18,18,0,0,0,0,0,0,0,0,0,69,69,69,226,226,226,255,255,255,255,255,255,
155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,255,214,
214,214,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,242,242,242,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,150,150,150,0,0,0,0,0,0,0,0,0,7,7,7,104,104,104,237,237,237,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,181,181,181,40,40,40,0,0,0,0,0,0,0,0,0,21,21,21,235,235,235,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,230,219,227,173,119,159,152,69,127,151,69,122,150,73,121,
205,181,196,252,251,251,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,
255,255,255,255,255,255,255,255,255,255,255,255,204,204,204,2,2,2,0,0,0,0,0,0,1,
1,1,111,111,111,241,241,241,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,187,187,
187,46,46,46,0,0,0,0,0,0,0,0,0,70,70,70,254,254,254,217,217,217,69,69,69,0,0,0,
0,0,0,0,0,0,50,50,50,210,210,210,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,168,168,168,25,25,25,0,0,0,0,0,0,0,0,0,120,120,120,
246,246,246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,221,221,221,2,2,2,0,0,0,0,0,
0,1,1,1,96,96,96,241,241,241,255,255,255,123,123,123,14,14,14,0,0,0,0,0,0,6,6,
6,102,102,102,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,223,223,223,23,23,23,0,0,0,0,0,0,0,0,0,65,65,65,220,220,220,
255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,
255,255,255,255,255,187,187,187,46,46,46,0,0,0,0,0,0,0,0,0,3,3,3,179,179,179,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,114,114,114,0,0,0,0,0,0,0,0,0,24,24,24,
147,147,147,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,201,201,201,63,63,63,0,0,0,
0,0,0,0,0,0,18,18,18,235,235,235,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,253,254,213,190,208,157,87,139,
152,69,127,151,69,122,168,115,148,237,229,234,255,254,255,65,65,65,0,0,0,0,0,0,
0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,
255,186,186,186,0,0,0,0,0,0,0,0,0,4,4,4,130,130,130,253,253,253,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,216,216,216,63,63,63,0,0,0,0,0,0,0,0,0,57,57,57,252,252,
252,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,50,50,50,210,210,210,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,161,161,161,18,18,18,0,
0,0,0,0,0,1,1,1,158,158,158,250,250,250,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,251,251,251,8,8,8,0,0,0,0,0,0,0,0,0,87,87,87,232,232,232,255,255,255,122,
122,122,14,14,14,0,0,0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,
0,0,0,0,0,0,65,65,65,219,219,219,255,255,255,255,255,255,155,155,155,26,26,26,
0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,255,172,172,172,28,28,28,0,
0,0,0,0,0,0,0,0,19,19,19,229,229,229,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
97,97,97,0,0,0,0,0,0,0,0,0,40,40,40,176,176,176,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,204,204,204,66,66,66,0,0,0,0,0,0,0,0,0,18,18,18,235,235,235,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
242,237,241,189,147,180,153,71,132,152,69,127,153,81,128,210,187,202,251,249,
250,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,
255,255,255,255,255,255,255,255,255,255,190,190,190,0,0,0,0,0,0,0,0,0,3,3,3,129,
129,129,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,212,212,60,60,
60,0,0,0,0,0,0,0,0,0,58,58,58,253,253,253,217,217,217,69,69,69,0,0,0,0,0,0,0,0,
0,49,49,49,210,210,210,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,162,162,162,18,18,18,0,0,0,0,0,0,0,0,0,152,152,152,249,249,
249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,250,250,250,5,5,5,0,0,0,0,0,0,0,0,0,
89,89,89,234,234,234,255,255,255,122,122,122,14,14,14,0,0,0,0,0,0,6,6,6,104,
104,104,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,219,219,219,255,255,
255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,
255,255,255,169,169,169,24,24,24,0,0,0,0,0,0,0,0,0,28,28,28,237,237,237,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,95,95,95,0,0,0,0,0,0,0,0,0,44,44,44,183,183,183,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,204,204,204,66,66,66,0,0,0,0,0,0,0,0,0,
18,18,18,235,235,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,253,254,222,204,219,161,94,148,153,68,132,151,71,127,
188,147,174,241,236,240,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,
0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,208,
208,208,1,1,1,0,0,0,0,0,0,0,0,0,105,105,105,236,236,236,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,180,180,180,42,42,42,0,0,0,0,0,0,0,0,0,75,75,75,255,255,255,217,
217,217,69,69,69,0,0,0,0,0,0,0,0,0,49,49,49,210,210,210,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,170,170,170,26,26,26,0,0,0,0,0,
0,0,0,0,111,111,111,245,245,245,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,210,
210,210,0,0,0,0,0,0,0,0,0,1,1,1,98,98,98,243,243,243,255,255,255,122,122,122,14,
14,14,0,0,0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,
0,0,65,65,65,219,219,219,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,
0,0,6,6,6,103,103,103,255,255,255,255,255,255,173,173,173,29,29,29,0,0,0,0,0,
0,0,0,0,13,13,13,229,229,229,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,111,111,
111,0,0,0,0,0,0,0,0,0,29,29,29,158,158,158,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,204,204,204,66,66,66,0,0,0,0,0,0,0,0,0,18,18,18,235,235,235,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,242,237,242,187,147,
181,153,70,138,153,69,133,172,118,157,229,216,225,254,253,254,255,255,255,255,
255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,
255,255,255,255,255,255,255,255,232,232,232,34,34,34,0,0,0,0,0,0,0,0,0,52,52,52,
191,191,191,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,247,247,247,120,120,120,12,12,12,0,0,0,
0,0,0,0,0,0,131,131,131,255,255,255,217,217,217,69,69,69,0,0,0,0,0,0,0,0,0,49,
49,49,210,210,210,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,196,196,196,57,57,57,0,0,0,0,0,0,0,0,0,31,31,31,224,224,224,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,253,253,253,112,112,112,0,0,0,0,0,0,0,0,0,15,15,15,131,131,
131,253,253,253,255,255,255,122,122,122,14,14,14,0,0,0,0,0,0,6,6,6,104,104,104,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,219,219,219,255,255,255,255,
255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,
255,193,193,193,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,141,141,141,0,0,0,0,0,0,0,0,0,8,8,8,112,112,112,246,246,
246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,245,245,245,173,173,173,50,50,50,0,0,0,0,0,0,0,0,0,18,18,18,
235,235,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,
252,252,218,198,216,155,79,145,154,69,138,163,101,149,219,201,214,254,253,253,
255,255,255,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,
209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,244,244,244,100,100,
100,1,1,1,0,0,0,0,0,0,4,4,4,109,109,109,227,227,227,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,250,250,179,179,179,
48,48,48,0,0,0,0,0,0,0,0,0,4,4,4,204,204,204,255,255,255,217,217,217,69,69,69,
0,0,0,0,0,0,0,0,0,49,49,49,210,210,210,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,230,230,230,99,99,99,2,2,2,0,0,0,0,0,0,0,0,
0,113,113,113,245,245,245,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,251,251,251,190,190,190,22,22,22,0,0,0,0,0,0,0,
0,0,42,42,42,179,179,179,255,255,255,255,255,255,122,122,122,14,14,14,0,0,0,0,
0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,219,
219,219,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,
103,255,255,255,255,255,255,223,223,223,91,91,91,1,1,1,0,0,0,0,0,0,0,0,0,44,44,
44,233,233,233,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,204,204,204,3,3,3,0,0,0,0,0,0,0,0,0,
50,50,50,184,184,184,251,251,251,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,247,247,247,171,171,171,66,66,66,36,36,36,0,0,0,0,0,
0,0,0,0,18,18,18,235,235,235,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,236,225,235,169,110,164,155,69,144,163,96,151,211,188,206,252,
251,252,255,255,255,255,255,255,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,
0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,
255,252,252,252,184,184,184,16,16,16,0,0,0,0,0,0,0,0,0,13,13,13,123,123,123,217,
217,217,248,248,248,254,254,254,255,255,255,255,255,255,253,253,253,239,239,239,
184,184,184,67,67,67,2,2,2,0,0,0,0,0,0,0,0,0,61,61,61,253,253,253,255,255,255,
217,217,217,68,68,68,0,0,0,0,0,0,0,0,0,46,46,46,208,208,208,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,156,156,156,26,
26,26,0,0,0,0,0,0,0,0,0,4,4,4,136,136,136,227,227,227,249,249,249,255,255,255,
255,255,255,255,255,255,253,253,253,238,238,238,187,187,187,47,47,47,2,2,2,0,0,
0,0,0,0,6,6,6,89,89,89,234,234,234,255,255,255,255,255,255,122,122,122,14,14,
14,0,0,0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,
65,65,65,219,219,219,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,
6,6,6,103,103,103,255,255,255,255,255,255,251,251,251,145,145,145,19,19,19,0,
0,0,0,0,0,0,0,0,0,0,0,98,98,98,222,222,222,249,249,249,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,49,
49,49,0,0,0,0,0,0,0,0,0,3,3,3,77,77,77,196,196,196,245,245,245,254,254,254,255,
255,255,255,255,255,254,254,254,242,242,242,175,175,175,45,45,45,30,30,30,36,36,
36,0,0,0,0,0,0,0,0,0,18,18,18,235,235,235,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,244,240,245,187,146,186,154,69,147,164,94,155,207,179,203,251,
251,251,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,65,65,65,0,
0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,233,233,233,96,96,96,5,5,5,0,0,0,0,0,0,0,0,0,8,8,8,
78,78,78,162,162,162,198,198,198,212,212,212,207,207,207,187,187,187,127,127,
127,42,42,42,1,1,1,0,0,0,0,0,0,0,0,0,21,21,21,178,178,178,255,255,255,255,255,
255,217,217,217,68,68,68,0,0,0,0,0,0,0,0,0,26,26,26,168,168,168,223,223,223,226,
226,226,228,228,228,230,230,230,233,233,233,239,239,239,250,250,250,221,221,221,
92,92,92,8,8,8,0,0,0,0,0,0,0,0,0,8,8,8,83,83,83,167,167,167,201,201,201,210,
210,210,206,206,206,185,185,185,124,124,124,34,34,34,2,2,2,0,0,0,0,0,0,1,1,1,40,
40,40,173,173,173,255,255,255,255,255,255,255,255,255,122,122,122,14,14,14,0,0,
0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,
219,219,219,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,
103,103,255,255,255,255,255,255,255,255,255,208,208,208,74,74,74,4,4,4,0,0,0,0,
0,0,0,0,0,5,5,5,72,72,72,167,167,167,204,204,204,217,217,217,219,219,219,219,
219,219,219,219,219,230,230,230,251,251,251,255,255,255,152,152,152,9,9,9,0,0,0,
0,0,0,0,0,0,4,4,4,60,60,60,151,151,151,200,200,200,217,217,217,218,218,218,
198,198,198,144,144,144,39,39,39,0,0,0,30,30,30,36,36,36,0,0,0,0,0,0,0,0,0,18,
18,18,235,235,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,248,250,202,171,
203,153,74,152,165,95,161,206,175,203,250,248,250,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,
72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
252,252,252,199,199,199,59,59,59,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,36,36,36,
64,64,64,53,53,53,25,25,25,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,120,120,120,
244,244,244,255,255,255,255,255,255,223,223,223,85,85,85,0,0,0,0,0,0,0,0,0,0,0,
0,48,48,48,90,90,90,97,97,97,101,101,101,106,106,106,113,113,113,142,142,142,
217,217,217,254,254,254,184,184,184,56,56,56,4,4,4,0,0,0,0,0,0,0,0,0,1,1,1,11,
11,11,41,41,41,60,60,60,51,51,51,22,22,22,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,19,19,
19,128,128,128,244,244,244,255,255,255,255,255,255,255,255,255,122,122,122,14,
14,14,0,0,0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,
0,0,65,65,65,219,219,219,255,255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,
0,0,6,6,6,103,103,103,255,255,255,255,255,255,255,255,255,251,251,251,162,162,
162,38,38,38,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,12,12,12,48,48,48,76,76,76,81,81,81,
81,81,81,81,81,81,133,133,133,238,238,238,255,255,255,234,234,234,84,84,84,5,5,
5,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,43,43,43,76,76,76,79,79,79,39,39,39,6,6,6,0,0,
0,0,0,0,30,30,30,36,36,36,0,0,0,0,0,0,0,0,0,18,18,18,235,235,235,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,249,247,250,209,185,212,156,82,159,167,101,167,208,180,207,251,
249,251,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,246,246,246,177,177,
177,57,57,57,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,17,17,17,104,104,104,226,226,226,254,254,254,255,255,255,255,255,
255,240,240,240,135,135,135,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,44,44,44,184,184,184,255,255,255,248,248,248,165,165,165,51,51,51,4,4,
4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,
16,16,114,114,114,230,230,230,255,255,255,255,255,255,255,255,255,255,255,255,
122,122,122,14,14,14,0,0,0,0,0,0,6,6,6,104,104,104,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,225,225,225,24,24,24,0,
0,0,0,0,0,0,0,0,65,65,65,219,219,219,255,255,255,255,255,255,155,155,155,26,
26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,255,255,255,255,255,255,
255,255,239,239,239,140,140,140,30,30,30,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,77,77,77,230,230,230,255,255,255,253,253,253,206,206,
206,75,75,75,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,30,30,30,36,36,36,0,0,0,0,0,0,0,0,0,18,18,18,235,235,235,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,248,246,249,206,181,211,155,89,163,171,113,175,214,193,215,250,250,250,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,209,209,209,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,244,244,
244,182,182,182,80,80,80,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,36,36,36,123,123,123,221,221,221,253,253,253,255,255,255,255,
255,255,255,255,255,253,253,253,201,201,201,66,66,66,3,3,3,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,184,184,184,255,255,255,255,255,255,246,
246,246,176,176,176,75,75,75,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,1,1,31,31,31,133,133,133,230,230,230,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,122,122,122,14,14,14,0,0,0,0,0,0,6,6,6,104,104,
104,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,219,219,219,255,255,255,
255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,236,236,236,147,147,147,48,48,48,3,
3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,230,230,230,255,
255,255,255,255,255,250,250,250,202,202,202,94,94,94,18,18,18,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,49,49,49,43,43,43,0,0,0,0,0,0,0,0,0,
18,18,18,235,235,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,239,235,241,197,169,204,156,99,166,176,131,182,226,
212,227,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,65,65,65,0,0,0,0,0,0,0,0,0,0,0,
0,72,72,72,209,209,209,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,249,249,249,210,210,210,139,139,139,
63,63,63,12,12,12,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,30,30,30,94,94,94,169,
169,169,233,233,233,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,245,245,245,180,180,180,68,68,68,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,44,44,44,184,184,184,255,255,255,255,255,255,255,255,255,251,
251,251,207,207,207,135,135,135,55,55,55,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,
2,2,30,30,30,98,98,98,172,172,172,242,242,242,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,122,122,122,14,14,14,0,0,0,0,0,0,6,6,6,
104,104,104,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,225,225,225,24,24,24,0,0,0,0,0,0,0,0,0,65,65,65,219,219,219,255,
255,255,255,255,255,155,155,155,26,26,26,0,0,0,0,0,0,6,6,6,103,103,103,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,243,243,243,186,
186,186,107,107,107,30,30,30,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,
230,230,230,255,255,255,255,255,255,255,255,255,252,252,252,219,219,219,141,141,
141,60,60,60,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,39,39,39,119,119,119,
147,147,147,61,61,61,2,2,2,2,2,2,2,2,2,20,20,20,235,235,235,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,253,254,227,219,231,179,146,191,157,
111,170,194,163,200,233,226,234,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,127,127,127,83,83,83,83,83,83,83,83,83,83,83,83,132,132,132,224,224,224,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,241,241,241,208,208,208,168,168,168,125,125,
125,94,94,94,84,84,84,87,87,87,105,105,105,145,145,145,185,185,185,223,223,223,
249,249,249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,246,246,246,206,206,206,144,144,144,98,98,98,84,84,
84,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,113,113,113,207,207,207,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,241,241,241,203,203,203,
164,164,164,122,122,122,92,92,92,84,84,84,88,88,88,108,108,108,145,145,145,186,
186,186,226,226,226,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,154,154,154,72,72,72,61,61,61,61,61,61,66,
66,66,140,140,140,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,235,235,235,99,99,99,83,83,83,83,83,83,83,83,83,127,127,
127,231,231,231,255,255,255,255,255,255,187,187,187,101,101,101,83,83,83,83,83,
83,87,87,87,153,153,153,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,253,253,253,229,229,229,188,188,188,144,144,144,
105,105,105,87,87,87,83,83,83,83,83,83,83,83,83,83,83,83,135,135,135,238,238,
238,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,241,241,241,206,
206,206,164,164,164,118,118,118,91,91,91,83,83,83,85,85,85,102,102,102,149,149,
149,194,194,194,234,234,234,234,234,234,182,182,182,157,157,157,157,157,157,157,
157,157,163,163,163,247,247,247,255,255,255,255,255,255,255,255,255,255,255,255,
245,244,246,204,188,213,160,125,177,170,137,183,214,198,219,245,242,246,255,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,232,232,232,224,224,224,
224,224,224,224,224,224,224,224,224,233,233,233,249,249,249,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,250,250,250,238,238,238,228,228,228,
225,225,225,226,226,226,232,232,232,244,244,244,253,253,253,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,243,243,243,229,229,229,224,224,224,
224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,229,229,229,246,246,
246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,250,250,250,237,237,237,227,227,227,225,225,225,226,226,226,232,232,232,
244,244,244,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,235,235,235,219,219,219,217,
217,217,217,217,217,218,218,218,232,232,232,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,251,251,251,227,227,227,224,224,
224,224,224,224,224,224,224,232,232,232,251,251,251,255,255,255,255,255,255,243,
243,243,227,227,227,224,224,224,224,224,224,225,225,225,237,237,237,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,244,244,244,231,231,231,225,225,225,224,224,224,224,
224,224,224,224,224,224,224,224,234,234,234,252,252,252,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,249,249,236,236,
236,227,227,227,224,224,224,225,225,225,230,230,230,245,245,245,254,254,254,255,
255,255,254,254,254,250,250,250,248,248,248,248,248,248,248,248,248,249,249,249,
254,254,254,255,255,255,255,255,255,252,251,252,221,214,227,166,141,186,157,126,
177,198,180,207,235,228,237,252,251,252,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,230,227,235,171,153,192,145,118,171,186,170,200,230,224,234,249,248,250,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,252,252,253,226,224,232,158,144,183,135,116,167,189,
178,204,237,233,239,251,250,252,254,254,254,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,252,252,252,247,247,249,240,239,243,199,
196,213,146,138,176,149,139,179,209,204,219,250,250,250,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,237,237,237,234,234,234,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,251,252,243,
243,244,236,237,239,216,216,224,181,180,200,162,159,186,189,187,205,238,238,241,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,148,148,148,130,130,130,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,251,251,251,224,224,224,217,217,217,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,247,247,247,240,240,241,227,228,230,203,204,209,193,193,202,
205,206,216,236,236,239,253,253,253,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,126,126,126,106,106,106,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,216,216,216,176,176,176,
177,177,177,213,213,213,251,251,251,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,240,240,240,209,209,209,207,207,207,219,
219,219,248,248,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,242,242,242,202,202,202,195,195,195,226,226,226,252,252,
252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,241,241,241,223,223,223,224,224,224,248,248,248,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,239,239,239,209,209,209,207,207,207,219,219,219,248,248,248,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,249,249,214,214,
214,248,248,248,242,242,242,224,224,224,244,244,244,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,251,251,251,225,225,225,207,207,207,
208,208,208,231,231,231,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,240,240,240,131,131,131,85,85,85,205,205,205,235,235,235,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
241,241,241,204,204,204,194,194,194,225,225,225,252,252,252,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,220,
220,220,206,206,206,217,217,217,206,206,206,214,214,214,248,248,248,255,255,255,
235,235,235,220,220,221,225,225,226,251,251,252,255,255,255,255,255,255,245,245,
245,218,218,218,207,207,207,207,207,207,244,244,244,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,
126,126,106,106,106,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,218,218,218,91,91,91,74,74,74,79,79,79,93,93,93,205,205,
205,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,150,150,150,99,99,99,113,113,113,148,148,148,234,234,234,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,246,246,246,156,156,
156,111,111,111,102,102,102,121,121,121,212,212,212,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,247,247,247,182,182,182,110,110,110,
166,166,166,239,239,239,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,144,144,100,100,100,
113,113,113,149,149,149,234,234,234,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,230,230,230,96,96,96,229,229,229,206,206,206,133,
133,133,212,212,212,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,254,254,224,224,224,112,112,112,109,109,109,116,116,116,183,183,183,251,251,
251,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,239,239,121,
121,121,38,38,38,115,115,115,197,197,197,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,242,242,242,162,162,162,111,111,111,100,100,
100,120,120,120,211,211,211,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,252,252,252,201,201,201,115,115,115,102,102,102,97,97,97,
104,104,104,104,104,104,195,195,195,252,252,252,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,183,183,183,111,111,111,110,110,110,114,
114,114,223,223,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,126,126,126,106,106,106,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,139,139,
139,55,55,55,193,193,193,183,183,183,69,69,69,130,130,130,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,81,81,81,61,61,
61,129,129,129,185,185,185,244,244,244,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,215,215,215,63,63,63,136,136,136,93,93,93,89,89,
89,196,196,196,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,242,242,242,141,141,141,79,79,79,210,210,210,249,249,249,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,72,72,72,64,64,64,131,131,131,187,187,187,244,244,244,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,221,221,
40,40,40,220,220,220,189,189,189,91,91,91,197,197,197,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,254,204,204,204,42,42,42,96,96,96,
148,148,148,212,212,212,253,253,253,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,239,239,239,122,122,122,64,64,64,183,183,183,227,227,227,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,213,213,213,
77,77,77,129,129,129,93,93,93,88,88,88,196,196,196,253,253,253,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,243,243,243,149,149,149,101,101,101,
148,148,148,71,71,71,145,145,145,110,110,110,126,126,126,245,245,245,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,136,136,136,57,
57,57,108,108,108,159,159,159,237,237,237,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,126,126,
106,106,106,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,113,113,113,77,77,77,253,253,253,227,227,227,81,81,81,110,110,
110,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,180,180,180,105,105,105,97,97,97,133,133,133,227,227,227,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,197,197,197,38,38,
38,112,112,112,135,135,135,144,144,144,173,173,173,248,248,248,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,243,243,243,149,149,149,122,122,122,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,177,177,177,106,106,106,
97,97,97,133,133,133,227,227,227,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,222,222,222,40,40,40,218,218,218,187,187,187,88,88,
88,197,197,197,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,234,234,234,141,141,141,100,100,100,102,102,102,175,175,175,247,247,247,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,239,239,122,122,
122,91,91,91,250,250,250,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,253,253,253,201,201,201,45,45,45,110,110,110,136,136,136,
140,140,140,179,179,179,246,246,246,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,238,238,238,142,142,142,137,137,137,206,206,206,108,108,108,194,
194,194,157,157,157,112,112,112,243,243,243,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,205,205,205,127,127,127,97,97,97,100,100,
100,213,213,213,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,126,126,126,106,106,106,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176,176,176,
42,42,42,122,122,122,108,108,108,35,35,35,109,109,109,253,253,253,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,202,202,202,151,151,
151,105,105,105,64,64,64,179,179,179,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,227,227,227,67,67,67,87,87,87,145,145,145,105,
105,105,163,163,163,251,251,251,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,243,243,243,150,150,150,125,125,125,254,254,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,201,201,201,151,151,151,104,104,104,63,63,63,179,179,
179,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,
230,230,53,53,53,116,116,116,109,109,109,87,87,87,216,216,216,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,241,241,241,176,176,176,
137,137,137,75,75,75,102,102,102,227,227,227,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,241,241,241,130,130,130,53,53,53,155,155,155,215,
215,215,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
222,222,222,78,78,78,85,85,85,145,145,145,102,102,102,165,165,165,248,248,248,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,238,238,143,143,
143,138,138,138,206,206,206,109,109,109,195,195,195,158,158,158,113,113,113,243,
243,243,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
221,221,221,167,167,167,131,131,131,41,41,41,145,145,145,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,157,157,157,141,141,141,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,243,243,243,161,161,161,95,95,95,103,103,103,
120,120,120,166,166,166,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,144,144,144,100,100,100,96,96,96,121,121,121,219,
219,219,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
251,251,251,195,195,195,124,124,124,115,115,115,164,164,164,232,232,232,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,246,246,246,176,
176,176,156,156,156,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,142,
142,142,100,100,100,96,96,96,121,121,121,219,219,219,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,168,168,168,63,63,
63,72,72,72,182,182,182,248,248,248,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,225,225,225,111,111,111,99,99,99,97,97,97,161,
161,161,243,243,243,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
251,251,251,198,198,198,95,95,95,103,103,103,192,192,192,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,249,249,249,198,198,198,126,
126,126,115,115,115,162,162,162,231,231,231,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,243,243,243,171,171,171,166,166,166,219,219,
219,146,146,146,210,210,210,184,184,184,149,149,149,246,246,246,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,182,182,182,110,110,110,
99,99,99,90,90,90,200,200,200,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,241,241,241,238,238,238,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,247,247,247,231,231,231,233,233,233,238,238,238,244,244,244,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
235,235,235,227,227,227,227,227,227,236,236,236,252,252,252,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,251,251,236,
236,236,232,232,232,245,245,245,254,254,254,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,254,243,243,243,240,240,240,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,234,234,234,227,227,227,227,227,
227,236,236,236,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,234,234,234,123,123,123,110,110,110,247,247,247,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,249,249,249,229,229,229,227,227,227,230,230,230,243,243,243,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,249,249,
232,232,232,230,230,230,245,245,245,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,251,251,251,236,236,236,232,232,232,244,
244,244,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,253,253,253,243,243,243,242,242,242,250,250,250,239,239,239,248,248,
248,245,245,245,240,240,240,254,254,254,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,242,242,242,228,228,228,227,227,227,230,230,230,
250,250,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,243,243,243,165,165,165,152,152,152,254,254,254,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255};
static Fl_RGB_Image image_fls(idata_fls, 165, 56, 3, 0);

Fl_Output *CuadroTextoTurno0=(Fl_Output *)0;

static void cb_CuadroTextoTurno0(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 0;
}

Fl_Group *GrupoTecladoTrabajos=(Fl_Group *)0;

Fl_Button *Boton1t=(Fl_Button *)0;

static void cb_Boton1t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton2t=(Fl_Button *)0;

static void cb_Boton2t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton3t=(Fl_Button *)0;

static void cb_Boton3t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton4t=(Fl_Button *)0;

static void cb_Boton4t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton5t=(Fl_Button *)0;

static void cb_Boton5t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton6t=(Fl_Button *)0;

static void cb_Boton6t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton7t=(Fl_Button *)0;

static void cb_Boton7t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton8t=(Fl_Button *)0;

static void cb_Boton8t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton9t=(Fl_Button *)0;

static void cb_Boton9t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Boton0t=(Fl_Button *)0;

static void cb_Boton0t(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonBorrart=(Fl_Button *)0;

static void cb_BotonBorrart(Fl_Button*, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	
	if (strlen(CuadroTextoTurno0->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno0->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno0->value(str);
	
	}
	
	break;
	
	case 1:
	
	if (strlen(CuadroTextoTurno1->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno1->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno1->value(str);
	
	}
	
	break;
	
	case 2:
	
	if (strlen(CuadroTextoTurno2->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno2->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno2->value(str);
	
	}
	
	break;
	
	case 3:
	
	if (strlen(CuadroTextoTurno3->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno3->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno3->value(str);
	
	}
	
	break;
	
	case 4:
	
	if (strlen(CuadroTextoTurno4->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno4->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno4->value(str);
	
	}
	
	break;
	
	case 5:
	
	if (strlen(CuadroTextoTurno5->value())) {
        		
		// copia el texto actual en una nueva variable
		strcpy(str, CuadroTextoTurno5->value());

		// adelanta el carácter de fin de string un carácter, para borrar el último
		str[strlen(str) - 1] = '\0';

		// asigna el nuevo texto al cuadro de texto
		CuadroTextoTurno5->value(str);
	
	}
	
	break;
	
};
}

Fl_Button *BotonQt=(Fl_Button *)0;

static void cb_BotonQt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonWt=(Fl_Button *)0;

static void cb_BotonWt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonEt=(Fl_Button *)0;

static void cb_BotonEt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonRt=(Fl_Button *)0;

static void cb_BotonRt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonTt=(Fl_Button *)0;

static void cb_BotonTt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonYt=(Fl_Button *)0;

static void cb_BotonYt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonUt=(Fl_Button *)0;

static void cb_BotonUt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonIt=(Fl_Button *)0;

static void cb_BotonIt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonOt=(Fl_Button *)0;

static void cb_BotonOt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonPt=(Fl_Button *)0;

static void cb_BotonPt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonAt=(Fl_Button *)0;

static void cb_BotonAt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonSt=(Fl_Button *)0;

static void cb_BotonSt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonDt=(Fl_Button *)0;

static void cb_BotonDt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonFt=(Fl_Button *)0;

static void cb_BotonFt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonGt=(Fl_Button *)0;

static void cb_BotonGt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonHt=(Fl_Button *)0;

static void cb_BotonHt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonJt=(Fl_Button *)0;

static void cb_BotonJt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonKt=(Fl_Button *)0;

static void cb_BotonKt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonLt=(Fl_Button *)0;

static void cb_BotonLt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonEnhet=(Fl_Button *)0;

static void cb_BotonEnhet(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonXt=(Fl_Button *)0;

static void cb_BotonXt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonCt=(Fl_Button *)0;

static void cb_BotonCt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonVt=(Fl_Button *)0;

static void cb_BotonVt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonBt=(Fl_Button *)0;

static void cb_BotonBt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonNt=(Fl_Button *)0;

static void cb_BotonNt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonMt=(Fl_Button *)0;

static void cb_BotonMt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonZt=(Fl_Button *)0;

static void cb_BotonZt(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonEspaciot=(Fl_Button *)0;

static void cb_BotonEspaciot(Fl_Button*, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, " ");
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, " ");
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, " ");
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, " ");
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, " ");
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, " ");
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *BotonMenost=(Fl_Button *)0;

static void cb_BotonMenost(Fl_Button* o, void*) {
  // string de texto auxiliar
char str[NumeroCaracteresTextoTurnos];

// concatena el carácter al campo apropiado
switch (indice) {

	case 0:
	strcpy(str, CuadroTextoTurno0->value());
	strcat(str, o->label());
	CuadroTextoTurno0->value(str);
	break;
	
	case 1:
	strcpy(str, CuadroTextoTurno1->value());
	strcat(str, o->label());
	CuadroTextoTurno1->value(str);
	break;
	
	case 2:
	strcpy(str, CuadroTextoTurno2->value());
	strcat(str, o->label());
	CuadroTextoTurno2->value(str);
	break;
	
	case 3:
	strcpy(str, CuadroTextoTurno3->value());
	strcat(str, o->label());
	CuadroTextoTurno3->value(str);
	break;
	
	case 4:
	strcpy(str, CuadroTextoTurno4->value());
	strcat(str, o->label());
	CuadroTextoTurno4->value(str);
	break;
	
	case 5:
	strcpy(str, CuadroTextoTurno5->value());
	strcat(str, o->label());
	CuadroTextoTurno5->value(str);
	break;
	
};
}

Fl_Button *Aceptar_VentanaTurnos=(Fl_Button *)0;

static void cb_Aceptar_VentanaTurnos(Fl_Button*, void*) {
  // Actualiza los campos de los turnos
HoraInicioTurno[0] = (int)CounterHoraInicioTurno0->value();
MinutoInicioTurno[0] = (int)CounterMinutoInicioTurno0->value();
HoraFinTurno[0] = (int)CounterHoraFinTurno0->value();
MinutoFinTurno[0] = (int)CounterMinutoFinTurno0->value();
strcpy(TextoTurno[0], CuadroTextoTurno0->value());

HoraInicioTurno[1] = (int)CounterHoraInicioTurno1->value();
MinutoInicioTurno[1] = (int)CounterMinutoInicioTurno1->value();
HoraFinTurno[1] = (int)CounterHoraFinTurno1->value();
MinutoFinTurno[1] = (int)CounterMinutoFinTurno1->value();
strcpy(TextoTurno[1], CuadroTextoTurno1->value());

HoraInicioTurno[2] = (int)CounterHoraInicioTurno2->value();
MinutoInicioTurno[2] = (int)CounterMinutoInicioTurno2->value();
HoraFinTurno[2] = (int)CounterHoraFinTurno2->value();
MinutoFinTurno[2] = (int)CounterMinutoFinTurno2->value();
strcpy(TextoTurno[2], CuadroTextoTurno2->value());

HoraInicioTurno[3] = (int)CounterHoraInicioTurno3->value();
MinutoInicioTurno[3] = (int)CounterMinutoInicioTurno3->value();
HoraFinTurno[3] = (int)CounterHoraFinTurno3->value();
MinutoFinTurno[3] = (int)CounterMinutoFinTurno3->value();
strcpy(TextoTurno[3], CuadroTextoTurno3->value());

HoraInicioTurno[4] = (int)CounterHoraInicioTurno4->value();
MinutoInicioTurno[4] = (int)CounterMinutoInicioTurno4->value();
HoraFinTurno[4] = (int)CounterHoraFinTurno4->value();
MinutoFinTurno[4] = (int)CounterMinutoFinTurno4->value();
strcpy(TextoTurno[4], CuadroTextoTurno4->value());

HoraInicioTurno[5] = (int)CounterHoraInicioTurno5->value();
MinutoInicioTurno[5] = (int)CounterMinutoInicioTurno5->value();
HoraFinTurno[5] = (int)CounterHoraFinTurno5->value();
MinutoFinTurno[5] = (int)CounterMinutoFinTurno5->value();
strcpy(TextoTurno[5], CuadroTextoTurno5->value());

// Oculta la ventana emergente actual
VentanaTurnos->hide();

// Y vuelve a presentar la ventana principal
VentanaConfiguracion->activate();
VentanaConfiguracion->cursor(FL_CURSOR_DEFAULT);
}

Fl_Button *Cancelar_VentanaTurnos=(Fl_Button *)0;

static void cb_Cancelar_VentanaTurnos(Fl_Button*, void*) {
  // Oculta la ventana emergente actual
VentanaTurnos->hide();

// Y vuelve a presentar la ventana principal
VentanaConfiguracion->activate();
VentanaConfiguracion->cursor(FL_CURSOR_DEFAULT);
}

Fl_Counter *CounterHoraInicioTurno0=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno0(Fl_Counter* o, void*) {
  //HoraInicioTurno(0) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno0=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno0(Fl_Counter* o, void*) {
  //MinutoInicioTurno(0) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno0=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno0(Fl_Counter* o, void*) {
  //HoraFinTurno(0) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno0=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno0(Fl_Counter* o, void*) {
  //MinutoFinTurno(0) = (int) o->value();
}

Fl_Output *CuadroTextoTurno1=(Fl_Output *)0;

static void cb_CuadroTextoTurno1(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 1;
}

Fl_Counter *CounterHoraInicioTurno1=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno1(Fl_Counter* o, void*) {
  //HoraInicioTurno(1) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno1=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno1(Fl_Counter* o, void*) {
  //MinutoInicioTurno(1) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno1=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno1(Fl_Counter* o, void*) {
  //HoraFinTurno(1) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno1=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno1(Fl_Counter* o, void*) {
  //MinutoFinTurno(1) = (int) o->value();
}

Fl_Output *CuadroTextoTurno2=(Fl_Output *)0;

static void cb_CuadroTextoTurno2(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 2;
}

Fl_Counter *CounterHoraInicioTurno2=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno2(Fl_Counter* o, void*) {
  //HoraInicioTurno(2) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno2=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno2(Fl_Counter* o, void*) {
  //MinutoInicioTurno(2) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno2=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno2(Fl_Counter* o, void*) {
  //HoraFinTurno(2) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno2=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno2(Fl_Counter* o, void*) {
  //MinutoFinTurno(2) = (int) o->value();
}

Fl_Output *CuadroTextoTurno3=(Fl_Output *)0;

static void cb_CuadroTextoTurno3(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 3;
}

Fl_Counter *CounterHoraInicioTurno3=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno3(Fl_Counter* o, void*) {
  //HoraInicioTurno(3) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno3=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno3(Fl_Counter* o, void*) {
  //MinutoInicioTurno(3) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno3=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno3(Fl_Counter* o, void*) {
  //HoraFinTurno(3) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno3=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno3(Fl_Counter* o, void*) {
  //MinutoFinTurno(3) = (int) o->value();
}

Fl_Output *CuadroTextoTurno4=(Fl_Output *)0;

static void cb_CuadroTextoTurno4(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 4;
}

Fl_Counter *CounterHoraInicioTurno4=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno4(Fl_Counter* o, void*) {
  //HoraInicioTurno(4) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno4=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno4(Fl_Counter* o, void*) {
  //MinutoInicioTurno(4) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno4=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno4(Fl_Counter* o, void*) {
  //HoraFinTurno(4) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno4=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno4(Fl_Counter* o, void*) {
  //MinutoFinTurno(4) = (int) o->value();
}

Fl_Output *CuadroTextoTurno5=(Fl_Output *)0;

static void cb_CuadroTextoTurno5(Fl_Output*, void*) {
  // variable que indica donde se ha fijado el foco, para el teclado
indice = 5;
}

Fl_Counter *CounterHoraInicioTurno5=(Fl_Counter *)0;

static void cb_CounterHoraInicioTurno5(Fl_Counter* o, void*) {
  //HoraInicioTurno(5) = (int) o->value();
}

Fl_Counter *CounterMinutoInicioTurno5=(Fl_Counter *)0;

static void cb_CounterMinutoInicioTurno5(Fl_Counter* o, void*) {
  //MinutoInicioTurno(5) = (int) o->value();
}

Fl_Counter *CounterHoraFinTurno5=(Fl_Counter *)0;

static void cb_CounterHoraFinTurno5(Fl_Counter* o, void*) {
  //HoraFinTurno(5) = (int) o->value();
}

Fl_Counter *CounterMinutoFinTurno5=(Fl_Counter *)0;

static void cb_CounterMinutoFinTurno5(Fl_Counter* o, void*) {
  //MinutoFinTurno(5) = (int) o->value();
}

Fl_Box *b1=(Fl_Box *)0;

Fl_Box *b2=(Fl_Box *)0;

Fl_Box *b3=(Fl_Box *)0;

Fl_Box *b4=(Fl_Box *)0;

Fl_Box *b5=(Fl_Box *)0;

Fl_Box *b6=(Fl_Box *)0;

Fl_Double_Window* Make_Window_Turnos() {
  { VentanaTurnos = new Fl_Double_Window(800, 600);
    VentanaTurnos->color(FL_BACKGROUND2_COLOR);
    VentanaTurnos->selection_color(FL_BACKGROUND2_COLOR);
    VentanaTurnos->when(FL_WHEN_RELEASE_ALWAYS);
    { LogoItacaVentanaTrabajos = new Fl_Box(630, 0, 165, 75);
      LogoItacaVentanaTrabajos->color(FL_BACKGROUND2_COLOR);
      LogoItacaVentanaTrabajos->image(image_fls);
      LogoItacaVentanaTrabajos->labelsize(12);
      LogoItacaVentanaTrabajos->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* LogoItacaVentanaTrabajos
    { Fl_Output* o = CuadroTextoTurno0 = new Fl_Output(505, 40, 110, 25, "Texto");
      CuadroTextoTurno0->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno0->color((Fl_Color)175);
      CuadroTextoTurno0->labelsize(12);
      CuadroTextoTurno0->textfont(13);
      CuadroTextoTurno0->textsize(12);
      CuadroTextoTurno0->callback((Fl_Callback*)cb_CuadroTextoTurno0);
      CuadroTextoTurno0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[0]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno0
    { GrupoTecladoTrabajos = new Fl_Group(10, 320, 615, 270);
      GrupoTecladoTrabajos->box(FL_PLASTIC_UP_FRAME);
      GrupoTecladoTrabajos->color(FL_FOREGROUND_COLOR);
      { Boton1t = new Fl_Button(20, 330, 50, 50, "1");
        Boton1t->box(FL_PLASTIC_UP_BOX);
        Boton1t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton1t->color(FL_INACTIVE_COLOR);
        Boton1t->labelfont(8);
        Boton1t->labelsize(20);
        Boton1t->callback((Fl_Callback*)cb_Boton1t);
      } // Fl_Button* Boton1t
      { Boton2t = new Fl_Button(70, 330, 50, 50, "2");
        Boton2t->box(FL_PLASTIC_UP_BOX);
        Boton2t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton2t->color(FL_INACTIVE_COLOR);
        Boton2t->labelfont(8);
        Boton2t->labelsize(20);
        Boton2t->callback((Fl_Callback*)cb_Boton2t);
      } // Fl_Button* Boton2t
      { Boton3t = new Fl_Button(120, 330, 50, 50, "3");
        Boton3t->box(FL_PLASTIC_UP_BOX);
        Boton3t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton3t->color(FL_INACTIVE_COLOR);
        Boton3t->labelfont(8);
        Boton3t->labelsize(20);
        Boton3t->callback((Fl_Callback*)cb_Boton3t);
      } // Fl_Button* Boton3t
      { Boton4t = new Fl_Button(170, 330, 50, 50, "4");
        Boton4t->box(FL_PLASTIC_UP_BOX);
        Boton4t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton4t->color(FL_INACTIVE_COLOR);
        Boton4t->labelfont(8);
        Boton4t->labelsize(20);
        Boton4t->callback((Fl_Callback*)cb_Boton4t);
      } // Fl_Button* Boton4t
      { Boton5t = new Fl_Button(220, 330, 50, 50, "5");
        Boton5t->box(FL_PLASTIC_UP_BOX);
        Boton5t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton5t->color(FL_INACTIVE_COLOR);
        Boton5t->labelfont(8);
        Boton5t->labelsize(20);
        Boton5t->callback((Fl_Callback*)cb_Boton5t);
      } // Fl_Button* Boton5t
      { Boton6t = new Fl_Button(270, 330, 50, 50, "6");
        Boton6t->box(FL_PLASTIC_UP_BOX);
        Boton6t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton6t->color(FL_INACTIVE_COLOR);
        Boton6t->labelfont(8);
        Boton6t->labelsize(20);
        Boton6t->callback((Fl_Callback*)cb_Boton6t);
      } // Fl_Button* Boton6t
      { Boton7t = new Fl_Button(320, 330, 50, 50, "7");
        Boton7t->box(FL_PLASTIC_UP_BOX);
        Boton7t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton7t->color(FL_INACTIVE_COLOR);
        Boton7t->labelfont(8);
        Boton7t->labelsize(20);
        Boton7t->callback((Fl_Callback*)cb_Boton7t);
      } // Fl_Button* Boton7t
      { Boton8t = new Fl_Button(370, 330, 50, 50, "8");
        Boton8t->box(FL_PLASTIC_UP_BOX);
        Boton8t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton8t->color(FL_INACTIVE_COLOR);
        Boton8t->labelfont(8);
        Boton8t->labelsize(20);
        Boton8t->callback((Fl_Callback*)cb_Boton8t);
      } // Fl_Button* Boton8t
      { Boton9t = new Fl_Button(420, 330, 50, 50, "9");
        Boton9t->box(FL_PLASTIC_UP_BOX);
        Boton9t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton9t->color(FL_INACTIVE_COLOR);
        Boton9t->labelfont(8);
        Boton9t->labelsize(20);
        Boton9t->callback((Fl_Callback*)cb_Boton9t);
      } // Fl_Button* Boton9t
      { Boton0t = new Fl_Button(470, 330, 50, 50, "0");
        Boton0t->box(FL_PLASTIC_UP_BOX);
        Boton0t->down_box(FL_PLASTIC_DOWN_BOX);
        Boton0t->color(FL_INACTIVE_COLOR);
        Boton0t->labelfont(8);
        Boton0t->labelsize(20);
        Boton0t->callback((Fl_Callback*)cb_Boton0t);
      } // Fl_Button* Boton0t
      { Fl_Button* o = BotonBorrart = new Fl_Button(520, 330, 95, 50, "Borrar");
        BotonBorrart->box(FL_PLASTIC_UP_BOX);
        BotonBorrart->down_box(FL_PLASTIC_DOWN_BOX);
        BotonBorrart->color(FL_INACTIVE_COLOR);
        BotonBorrart->labelfont(8);
        BotonBorrart->labelsize(17);
        BotonBorrart->callback((Fl_Callback*)cb_BotonBorrart);
        switch (Idioma) {case ESP:o->label("Borrar");break; case ING:o->label("Delete");break; case ITA:o->label("Eliminare");break;}
      } // Fl_Button* BotonBorrart
      { BotonQt = new Fl_Button(45, 380, 50, 50, "Q");
        BotonQt->box(FL_PLASTIC_UP_BOX);
        BotonQt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonQt->color(FL_INACTIVE_COLOR);
        BotonQt->labelfont(8);
        BotonQt->labelsize(20);
        BotonQt->callback((Fl_Callback*)cb_BotonQt);
      } // Fl_Button* BotonQt
      { BotonWt = new Fl_Button(95, 380, 50, 50, "W");
        BotonWt->box(FL_PLASTIC_UP_BOX);
        BotonWt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonWt->color(FL_INACTIVE_COLOR);
        BotonWt->labelfont(8);
        BotonWt->labelsize(20);
        BotonWt->callback((Fl_Callback*)cb_BotonWt);
      } // Fl_Button* BotonWt
      { BotonEt = new Fl_Button(145, 380, 50, 50, "E");
        BotonEt->box(FL_PLASTIC_UP_BOX);
        BotonEt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonEt->color(FL_INACTIVE_COLOR);
        BotonEt->labelfont(8);
        BotonEt->labelsize(20);
        BotonEt->callback((Fl_Callback*)cb_BotonEt);
      } // Fl_Button* BotonEt
      { BotonRt = new Fl_Button(195, 380, 50, 50, "R");
        BotonRt->box(FL_PLASTIC_UP_BOX);
        BotonRt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonRt->color(FL_INACTIVE_COLOR);
        BotonRt->labelfont(8);
        BotonRt->labelsize(20);
        BotonRt->callback((Fl_Callback*)cb_BotonRt);
      } // Fl_Button* BotonRt
      { BotonTt = new Fl_Button(245, 380, 50, 50, "T");
        BotonTt->box(FL_PLASTIC_UP_BOX);
        BotonTt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonTt->color(FL_INACTIVE_COLOR);
        BotonTt->labelfont(8);
        BotonTt->labelsize(20);
        BotonTt->callback((Fl_Callback*)cb_BotonTt);
      } // Fl_Button* BotonTt
      { BotonYt = new Fl_Button(295, 380, 50, 50, "Y");
        BotonYt->box(FL_PLASTIC_UP_BOX);
        BotonYt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonYt->color(FL_INACTIVE_COLOR);
        BotonYt->labelfont(8);
        BotonYt->labelsize(20);
        BotonYt->callback((Fl_Callback*)cb_BotonYt);
      } // Fl_Button* BotonYt
      { BotonUt = new Fl_Button(345, 380, 50, 50, "U");
        BotonUt->box(FL_PLASTIC_UP_BOX);
        BotonUt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonUt->color(FL_INACTIVE_COLOR);
        BotonUt->labelfont(8);
        BotonUt->labelsize(20);
        BotonUt->callback((Fl_Callback*)cb_BotonUt);
      } // Fl_Button* BotonUt
      { BotonIt = new Fl_Button(395, 380, 50, 50, "I");
        BotonIt->box(FL_PLASTIC_UP_BOX);
        BotonIt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonIt->color(FL_INACTIVE_COLOR);
        BotonIt->labelfont(8);
        BotonIt->labelsize(20);
        BotonIt->callback((Fl_Callback*)cb_BotonIt);
      } // Fl_Button* BotonIt
      { BotonOt = new Fl_Button(445, 380, 50, 50, "O");
        BotonOt->box(FL_PLASTIC_UP_BOX);
        BotonOt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonOt->color(FL_INACTIVE_COLOR);
        BotonOt->labelfont(8);
        BotonOt->labelsize(20);
        BotonOt->callback((Fl_Callback*)cb_BotonOt);
      } // Fl_Button* BotonOt
      { BotonPt = new Fl_Button(495, 380, 50, 50, "P");
        BotonPt->box(FL_PLASTIC_UP_BOX);
        BotonPt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonPt->color(FL_INACTIVE_COLOR);
        BotonPt->labelfont(8);
        BotonPt->labelsize(20);
        BotonPt->callback((Fl_Callback*)cb_BotonPt);
      } // Fl_Button* BotonPt
      { BotonAt = new Fl_Button(70, 430, 50, 50, "A");
        BotonAt->box(FL_PLASTIC_UP_BOX);
        BotonAt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonAt->color(FL_INACTIVE_COLOR);
        BotonAt->labelfont(8);
        BotonAt->labelsize(20);
        BotonAt->callback((Fl_Callback*)cb_BotonAt);
      } // Fl_Button* BotonAt
      { BotonSt = new Fl_Button(120, 430, 50, 50, "S");
        BotonSt->box(FL_PLASTIC_UP_BOX);
        BotonSt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonSt->color(FL_INACTIVE_COLOR);
        BotonSt->labelfont(8);
        BotonSt->labelsize(20);
        BotonSt->callback((Fl_Callback*)cb_BotonSt);
      } // Fl_Button* BotonSt
      { BotonDt = new Fl_Button(170, 430, 50, 50, "D");
        BotonDt->box(FL_PLASTIC_UP_BOX);
        BotonDt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonDt->color(FL_INACTIVE_COLOR);
        BotonDt->labelfont(8);
        BotonDt->labelsize(20);
        BotonDt->callback((Fl_Callback*)cb_BotonDt);
      } // Fl_Button* BotonDt
      { BotonFt = new Fl_Button(220, 430, 50, 50, "F");
        BotonFt->box(FL_PLASTIC_UP_BOX);
        BotonFt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonFt->color(FL_INACTIVE_COLOR);
        BotonFt->labelfont(8);
        BotonFt->labelsize(20);
        BotonFt->callback((Fl_Callback*)cb_BotonFt);
      } // Fl_Button* BotonFt
      { BotonGt = new Fl_Button(270, 430, 50, 50, "G");
        BotonGt->box(FL_PLASTIC_UP_BOX);
        BotonGt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonGt->color(FL_INACTIVE_COLOR);
        BotonGt->labelfont(8);
        BotonGt->labelsize(20);
        BotonGt->callback((Fl_Callback*)cb_BotonGt);
      } // Fl_Button* BotonGt
      { BotonHt = new Fl_Button(320, 430, 50, 50, "H");
        BotonHt->box(FL_PLASTIC_UP_BOX);
        BotonHt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonHt->color(FL_INACTIVE_COLOR);
        BotonHt->labelfont(8);
        BotonHt->labelsize(20);
        BotonHt->callback((Fl_Callback*)cb_BotonHt);
      } // Fl_Button* BotonHt
      { BotonJt = new Fl_Button(370, 430, 50, 50, "J");
        BotonJt->box(FL_PLASTIC_UP_BOX);
        BotonJt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonJt->color(FL_INACTIVE_COLOR);
        BotonJt->labelfont(8);
        BotonJt->labelsize(20);
        BotonJt->callback((Fl_Callback*)cb_BotonJt);
      } // Fl_Button* BotonJt
      { BotonKt = new Fl_Button(420, 430, 50, 50, "K");
        BotonKt->box(FL_PLASTIC_UP_BOX);
        BotonKt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonKt->color(FL_INACTIVE_COLOR);
        BotonKt->labelfont(8);
        BotonKt->labelsize(20);
        BotonKt->callback((Fl_Callback*)cb_BotonKt);
      } // Fl_Button* BotonKt
      { BotonLt = new Fl_Button(470, 430, 50, 50, "L");
        BotonLt->box(FL_PLASTIC_UP_BOX);
        BotonLt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonLt->color(FL_INACTIVE_COLOR);
        BotonLt->labelfont(8);
        BotonLt->labelsize(20);
        BotonLt->callback((Fl_Callback*)cb_BotonLt);
      } // Fl_Button* BotonLt
      { Fl_Button* o = BotonEnhet = new Fl_Button(520, 430, 50, 50, "\321");
        BotonEnhet->box(FL_PLASTIC_UP_BOX);
        BotonEnhet->down_box(FL_PLASTIC_DOWN_BOX);
        BotonEnhet->color(FL_INACTIVE_COLOR);
        BotonEnhet->labelfont(8);
        BotonEnhet->labelsize(20);
        BotonEnhet->callback((Fl_Callback*)cb_BotonEnhet);
        o->hide();// no se usa, problemas con el sistema de archivos
      } // Fl_Button* BotonEnhet
      { BotonXt = new Fl_Button(145, 480, 50, 50, "X");
        BotonXt->box(FL_PLASTIC_UP_BOX);
        BotonXt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonXt->color(FL_INACTIVE_COLOR);
        BotonXt->labelfont(8);
        BotonXt->labelsize(20);
        BotonXt->callback((Fl_Callback*)cb_BotonXt);
      } // Fl_Button* BotonXt
      { BotonCt = new Fl_Button(195, 480, 50, 50, "C");
        BotonCt->box(FL_PLASTIC_UP_BOX);
        BotonCt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonCt->color(FL_INACTIVE_COLOR);
        BotonCt->labelfont(8);
        BotonCt->labelsize(20);
        BotonCt->callback((Fl_Callback*)cb_BotonCt);
      } // Fl_Button* BotonCt
      { BotonVt = new Fl_Button(245, 480, 50, 50, "V");
        BotonVt->box(FL_PLASTIC_UP_BOX);
        BotonVt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonVt->color(FL_INACTIVE_COLOR);
        BotonVt->labelfont(8);
        BotonVt->labelsize(20);
        BotonVt->callback((Fl_Callback*)cb_BotonVt);
      } // Fl_Button* BotonVt
      { BotonBt = new Fl_Button(295, 480, 50, 50, "B");
        BotonBt->box(FL_PLASTIC_UP_BOX);
        BotonBt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonBt->color(FL_INACTIVE_COLOR);
        BotonBt->labelfont(8);
        BotonBt->labelsize(20);
        BotonBt->callback((Fl_Callback*)cb_BotonBt);
      } // Fl_Button* BotonBt
      { BotonNt = new Fl_Button(345, 480, 50, 50, "N");
        BotonNt->box(FL_PLASTIC_UP_BOX);
        BotonNt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonNt->color(FL_INACTIVE_COLOR);
        BotonNt->labelfont(8);
        BotonNt->labelsize(20);
        BotonNt->callback((Fl_Callback*)cb_BotonNt);
      } // Fl_Button* BotonNt
      { BotonMt = new Fl_Button(395, 480, 50, 50, "M");
        BotonMt->box(FL_PLASTIC_UP_BOX);
        BotonMt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonMt->color(FL_INACTIVE_COLOR);
        BotonMt->labelfont(8);
        BotonMt->labelsize(20);
        BotonMt->callback((Fl_Callback*)cb_BotonMt);
      } // Fl_Button* BotonMt
      { BotonZt = new Fl_Button(95, 480, 50, 50, "Z");
        BotonZt->box(FL_PLASTIC_UP_BOX);
        BotonZt->down_box(FL_PLASTIC_DOWN_BOX);
        BotonZt->color(FL_INACTIVE_COLOR);
        BotonZt->labelfont(8);
        BotonZt->labelsize(20);
        BotonZt->callback((Fl_Callback*)cb_BotonZt);
      } // Fl_Button* BotonZt
      { BotonEspaciot = new Fl_Button(120, 530, 350, 50, " ");
        BotonEspaciot->box(FL_PLASTIC_UP_BOX);
        BotonEspaciot->down_box(FL_PLASTIC_DOWN_BOX);
        BotonEspaciot->color(FL_INACTIVE_COLOR);
        BotonEspaciot->labelfont(8);
        BotonEspaciot->labelsize(20);
        BotonEspaciot->callback((Fl_Callback*)cb_BotonEspaciot);
      } // Fl_Button* BotonEspaciot
      { BotonMenost = new Fl_Button(445, 480, 50, 50, "-");
        BotonMenost->box(FL_PLASTIC_UP_BOX);
        BotonMenost->down_box(FL_PLASTIC_DOWN_BOX);
        BotonMenost->color(FL_INACTIVE_COLOR);
        BotonMenost->labelfont(8);
        BotonMenost->labelsize(20);
        BotonMenost->callback((Fl_Callback*)cb_BotonMenost);
      } // Fl_Button* BotonMenost
      GrupoTecladoTrabajos->end();
    } // Fl_Group* GrupoTecladoTrabajos
    { Fl_Button* o = Aceptar_VentanaTurnos = new Fl_Button(640, 425, 145, 75, "Aceptar");
      Aceptar_VentanaTurnos->box(FL_PLASTIC_UP_BOX);
      Aceptar_VentanaTurnos->down_box(FL_PLASTIC_DOWN_BOX);
      Aceptar_VentanaTurnos->color(FL_FOREGROUND_COLOR);
      Aceptar_VentanaTurnos->labelfont(8);
      Aceptar_VentanaTurnos->labelsize(20);
      Aceptar_VentanaTurnos->callback((Fl_Callback*)cb_Aceptar_VentanaTurnos);
      switch (Idioma) {case ESP:o->label("Aceptar");break; case ING:o->label("Accept");break; case ITA:o->label("Acettare");break;}
    } // Fl_Button* Aceptar_VentanaTurnos
    { Fl_Button* o = Cancelar_VentanaTurnos = new Fl_Button(640, 510, 145, 75, "Cancelar");
      Cancelar_VentanaTurnos->box(FL_PLASTIC_UP_BOX);
      Cancelar_VentanaTurnos->down_box(FL_PLASTIC_DOWN_BOX);
      Cancelar_VentanaTurnos->color(FL_FOREGROUND_COLOR);
      Cancelar_VentanaTurnos->labelfont(8);
      Cancelar_VentanaTurnos->labelsize(20);
      Cancelar_VentanaTurnos->callback((Fl_Callback*)cb_Cancelar_VentanaTurnos);
      switch (Idioma) {case ESP:o->label("Cancelar");break; case ING:o->label("Cancel");break; case ITA:o->label("Annulla");break;}
    } // Fl_Button* Cancelar_VentanaTurnos
    { Fl_Counter* o = CounterHoraInicioTurno0 = new Fl_Counter(40, 40, 100, 25, "Hora inicio");
      CounterHoraInicioTurno0->type(1);
      CounterHoraInicioTurno0->box(FL_FLAT_BOX);
      CounterHoraInicioTurno0->color((Fl_Color)48);
      CounterHoraInicioTurno0->labelsize(12);
      CounterHoraInicioTurno0->minimum(0);
      CounterHoraInicioTurno0->maximum(23);
      CounterHoraInicioTurno0->step(1);
      CounterHoraInicioTurno0->textfont(13);
      CounterHoraInicioTurno0->textsize(12);
      CounterHoraInicioTurno0->callback((Fl_Callback*)cb_CounterHoraInicioTurno0);
      CounterHoraInicioTurno0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno0->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[0]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Ora inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno0
    { Fl_Counter* o = CounterMinutoInicioTurno0 = new Fl_Counter(150, 40, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno0->type(1);
      CounterMinutoInicioTurno0->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno0->color((Fl_Color)48);
      CounterMinutoInicioTurno0->labelsize(12);
      CounterMinutoInicioTurno0->minimum(0);
      CounterMinutoInicioTurno0->maximum(59);
      CounterMinutoInicioTurno0->step(1);
      CounterMinutoInicioTurno0->textfont(13);
      CounterMinutoInicioTurno0->textsize(12);
      CounterMinutoInicioTurno0->callback((Fl_Callback*)cb_CounterMinutoInicioTurno0);
      CounterMinutoInicioTurno0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno0->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[0]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno0
    { Fl_Counter* o = CounterHoraFinTurno0 = new Fl_Counter(270, 40, 100, 25, "Hora fin");
      CounterHoraFinTurno0->type(1);
      CounterHoraFinTurno0->box(FL_FLAT_BOX);
      CounterHoraFinTurno0->color((Fl_Color)48);
      CounterHoraFinTurno0->labelsize(12);
      CounterHoraFinTurno0->minimum(0);
      CounterHoraFinTurno0->maximum(23);
      CounterHoraFinTurno0->step(1);
      CounterHoraFinTurno0->textfont(13);
      CounterHoraFinTurno0->textsize(12);
      CounterHoraFinTurno0->callback((Fl_Callback*)cb_CounterHoraFinTurno0);
      CounterHoraFinTurno0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno0->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[0]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Ora fine");break;}
    } // Fl_Counter* CounterHoraFinTurno0
    { Fl_Counter* o = CounterMinutoFinTurno0 = new Fl_Counter(380, 40, 100, 25, "Minuto fin");
      CounterMinutoFinTurno0->type(1);
      CounterMinutoFinTurno0->box(FL_FLAT_BOX);
      CounterMinutoFinTurno0->color((Fl_Color)48);
      CounterMinutoFinTurno0->labelsize(12);
      CounterMinutoFinTurno0->minimum(0);
      CounterMinutoFinTurno0->maximum(59);
      CounterMinutoFinTurno0->step(1);
      CounterMinutoFinTurno0->textfont(13);
      CounterMinutoFinTurno0->textsize(12);
      CounterMinutoFinTurno0->callback((Fl_Callback*)cb_CounterMinutoFinTurno0);
      CounterMinutoFinTurno0->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno0->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[0]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno0
    { Fl_Output* o = CuadroTextoTurno1 = new Fl_Output(505, 85, 110, 25, "Texto");
      CuadroTextoTurno1->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno1->color((Fl_Color)175);
      CuadroTextoTurno1->labeltype(FL_NO_LABEL);
      CuadroTextoTurno1->labelsize(12);
      CuadroTextoTurno1->textfont(13);
      CuadroTextoTurno1->textsize(12);
      CuadroTextoTurno1->callback((Fl_Callback*)cb_CuadroTextoTurno1);
      CuadroTextoTurno1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[1]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno1
    { Fl_Counter* o = CounterHoraInicioTurno1 = new Fl_Counter(40, 85, 100, 25, "Hora inicio");
      CounterHoraInicioTurno1->type(1);
      CounterHoraInicioTurno1->box(FL_FLAT_BOX);
      CounterHoraInicioTurno1->color((Fl_Color)48);
      CounterHoraInicioTurno1->labeltype(FL_NO_LABEL);
      CounterHoraInicioTurno1->labelsize(12);
      CounterHoraInicioTurno1->minimum(0);
      CounterHoraInicioTurno1->maximum(23);
      CounterHoraInicioTurno1->step(1);
      CounterHoraInicioTurno1->textfont(13);
      CounterHoraInicioTurno1->textsize(12);
      CounterHoraInicioTurno1->callback((Fl_Callback*)cb_CounterHoraInicioTurno1);
      CounterHoraInicioTurno1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno1->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[1]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Hora di inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno1
    { Fl_Counter* o = CounterMinutoInicioTurno1 = new Fl_Counter(150, 85, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno1->type(1);
      CounterMinutoInicioTurno1->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno1->color((Fl_Color)48);
      CounterMinutoInicioTurno1->labeltype(FL_NO_LABEL);
      CounterMinutoInicioTurno1->labelsize(12);
      CounterMinutoInicioTurno1->minimum(0);
      CounterMinutoInicioTurno1->maximum(59);
      CounterMinutoInicioTurno1->step(1);
      CounterMinutoInicioTurno1->textfont(13);
      CounterMinutoInicioTurno1->textsize(12);
      CounterMinutoInicioTurno1->callback((Fl_Callback*)cb_CounterMinutoInicioTurno1);
      CounterMinutoInicioTurno1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno1->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[1]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti di inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno1
    { Fl_Counter* o = CounterHoraFinTurno1 = new Fl_Counter(270, 85, 100, 25, "Hora fin");
      CounterHoraFinTurno1->type(1);
      CounterHoraFinTurno1->box(FL_FLAT_BOX);
      CounterHoraFinTurno1->color((Fl_Color)48);
      CounterHoraFinTurno1->labeltype(FL_NO_LABEL);
      CounterHoraFinTurno1->labelsize(12);
      CounterHoraFinTurno1->minimum(0);
      CounterHoraFinTurno1->maximum(23);
      CounterHoraFinTurno1->step(1);
      CounterHoraFinTurno1->textfont(13);
      CounterHoraFinTurno1->textsize(12);
      CounterHoraFinTurno1->callback((Fl_Callback*)cb_CounterHoraFinTurno1);
      CounterHoraFinTurno1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno1->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[1]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Hora di fine");break;}
    } // Fl_Counter* CounterHoraFinTurno1
    { Fl_Counter* o = CounterMinutoFinTurno1 = new Fl_Counter(380, 85, 100, 25, "Minuto fin");
      CounterMinutoFinTurno1->type(1);
      CounterMinutoFinTurno1->box(FL_FLAT_BOX);
      CounterMinutoFinTurno1->color((Fl_Color)48);
      CounterMinutoFinTurno1->labeltype(FL_NO_LABEL);
      CounterMinutoFinTurno1->labelsize(12);
      CounterMinutoFinTurno1->minimum(0);
      CounterMinutoFinTurno1->maximum(59);
      CounterMinutoFinTurno1->step(1);
      CounterMinutoFinTurno1->textfont(13);
      CounterMinutoFinTurno1->textsize(12);
      CounterMinutoFinTurno1->callback((Fl_Callback*)cb_CounterMinutoFinTurno1);
      CounterMinutoFinTurno1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno1->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[1]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti di fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno1
    { Fl_Output* o = CuadroTextoTurno2 = new Fl_Output(505, 130, 110, 25, "Texto");
      CuadroTextoTurno2->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno2->color((Fl_Color)175);
      CuadroTextoTurno2->labeltype(FL_NO_LABEL);
      CuadroTextoTurno2->labelsize(12);
      CuadroTextoTurno2->textfont(13);
      CuadroTextoTurno2->textsize(12);
      CuadroTextoTurno2->callback((Fl_Callback*)cb_CuadroTextoTurno2);
      CuadroTextoTurno2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[2]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno2
    { Fl_Counter* o = CounterHoraInicioTurno2 = new Fl_Counter(40, 130, 100, 25, "Hora inicio");
      CounterHoraInicioTurno2->type(1);
      CounterHoraInicioTurno2->box(FL_FLAT_BOX);
      CounterHoraInicioTurno2->color((Fl_Color)48);
      CounterHoraInicioTurno2->labeltype(FL_NO_LABEL);
      CounterHoraInicioTurno2->labelsize(12);
      CounterHoraInicioTurno2->minimum(0);
      CounterHoraInicioTurno2->maximum(23);
      CounterHoraInicioTurno2->step(1);
      CounterHoraInicioTurno2->textfont(13);
      CounterHoraInicioTurno2->textsize(12);
      CounterHoraInicioTurno2->callback((Fl_Callback*)cb_CounterHoraInicioTurno2);
      CounterHoraInicioTurno2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno2->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[2]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Hora di inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno2
    { Fl_Counter* o = CounterMinutoInicioTurno2 = new Fl_Counter(150, 130, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno2->type(1);
      CounterMinutoInicioTurno2->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno2->color((Fl_Color)48);
      CounterMinutoInicioTurno2->labeltype(FL_NO_LABEL);
      CounterMinutoInicioTurno2->labelsize(12);
      CounterMinutoInicioTurno2->minimum(0);
      CounterMinutoInicioTurno2->maximum(59);
      CounterMinutoInicioTurno2->step(1);
      CounterMinutoInicioTurno2->textfont(13);
      CounterMinutoInicioTurno2->textsize(12);
      CounterMinutoInicioTurno2->callback((Fl_Callback*)cb_CounterMinutoInicioTurno2);
      CounterMinutoInicioTurno2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno2->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[2]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti di inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno2
    { Fl_Counter* o = CounterHoraFinTurno2 = new Fl_Counter(270, 130, 100, 25, "Hora fin");
      CounterHoraFinTurno2->type(1);
      CounterHoraFinTurno2->box(FL_FLAT_BOX);
      CounterHoraFinTurno2->color((Fl_Color)48);
      CounterHoraFinTurno2->labeltype(FL_NO_LABEL);
      CounterHoraFinTurno2->labelsize(12);
      CounterHoraFinTurno2->minimum(0);
      CounterHoraFinTurno2->maximum(23);
      CounterHoraFinTurno2->step(1);
      CounterHoraFinTurno2->textfont(13);
      CounterHoraFinTurno2->textsize(12);
      CounterHoraFinTurno2->callback((Fl_Callback*)cb_CounterHoraFinTurno2);
      CounterHoraFinTurno2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno2->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[2]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Hora di fine");break;}
    } // Fl_Counter* CounterHoraFinTurno2
    { Fl_Counter* o = CounterMinutoFinTurno2 = new Fl_Counter(380, 130, 100, 25, "Minuto fin");
      CounterMinutoFinTurno2->type(1);
      CounterMinutoFinTurno2->box(FL_FLAT_BOX);
      CounterMinutoFinTurno2->color((Fl_Color)48);
      CounterMinutoFinTurno2->labeltype(FL_NO_LABEL);
      CounterMinutoFinTurno2->labelsize(12);
      CounterMinutoFinTurno2->minimum(0);
      CounterMinutoFinTurno2->maximum(59);
      CounterMinutoFinTurno2->step(1);
      CounterMinutoFinTurno2->textfont(13);
      CounterMinutoFinTurno2->textsize(12);
      CounterMinutoFinTurno2->callback((Fl_Callback*)cb_CounterMinutoFinTurno2);
      CounterMinutoFinTurno2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno2->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[2]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti di fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno2
    { Fl_Output* o = CuadroTextoTurno3 = new Fl_Output(505, 175, 110, 25, "Texto");
      CuadroTextoTurno3->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno3->color((Fl_Color)175);
      CuadroTextoTurno3->labeltype(FL_NO_LABEL);
      CuadroTextoTurno3->labelsize(12);
      CuadroTextoTurno3->textfont(13);
      CuadroTextoTurno3->textsize(12);
      CuadroTextoTurno3->callback((Fl_Callback*)cb_CuadroTextoTurno3);
      CuadroTextoTurno3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[3]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno3
    { Fl_Counter* o = CounterHoraInicioTurno3 = new Fl_Counter(40, 175, 100, 25, "Hora inicio");
      CounterHoraInicioTurno3->type(1);
      CounterHoraInicioTurno3->box(FL_FLAT_BOX);
      CounterHoraInicioTurno3->color((Fl_Color)48);
      CounterHoraInicioTurno3->labeltype(FL_NO_LABEL);
      CounterHoraInicioTurno3->labelsize(12);
      CounterHoraInicioTurno3->minimum(0);
      CounterHoraInicioTurno3->maximum(23);
      CounterHoraInicioTurno3->step(1);
      CounterHoraInicioTurno3->textfont(13);
      CounterHoraInicioTurno3->textsize(12);
      CounterHoraInicioTurno3->callback((Fl_Callback*)cb_CounterHoraInicioTurno3);
      CounterHoraInicioTurno3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno3->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[3]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Hora di inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno3
    { Fl_Counter* o = CounterMinutoInicioTurno3 = new Fl_Counter(150, 175, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno3->type(1);
      CounterMinutoInicioTurno3->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno3->color((Fl_Color)48);
      CounterMinutoInicioTurno3->labeltype(FL_NO_LABEL);
      CounterMinutoInicioTurno3->labelsize(12);
      CounterMinutoInicioTurno3->minimum(0);
      CounterMinutoInicioTurno3->maximum(59);
      CounterMinutoInicioTurno3->step(1);
      CounterMinutoInicioTurno3->textfont(13);
      CounterMinutoInicioTurno3->textsize(12);
      CounterMinutoInicioTurno3->callback((Fl_Callback*)cb_CounterMinutoInicioTurno3);
      CounterMinutoInicioTurno3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno3->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[3]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti di inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno3
    { Fl_Counter* o = CounterHoraFinTurno3 = new Fl_Counter(270, 175, 100, 25, "Hora fin");
      CounterHoraFinTurno3->type(1);
      CounterHoraFinTurno3->box(FL_FLAT_BOX);
      CounterHoraFinTurno3->color((Fl_Color)48);
      CounterHoraFinTurno3->labeltype(FL_NO_LABEL);
      CounterHoraFinTurno3->labelsize(12);
      CounterHoraFinTurno3->minimum(0);
      CounterHoraFinTurno3->maximum(23);
      CounterHoraFinTurno3->step(1);
      CounterHoraFinTurno3->textfont(13);
      CounterHoraFinTurno3->textsize(12);
      CounterHoraFinTurno3->callback((Fl_Callback*)cb_CounterHoraFinTurno3);
      CounterHoraFinTurno3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno3->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[3]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Hora di fine");break;}
    } // Fl_Counter* CounterHoraFinTurno3
    { Fl_Counter* o = CounterMinutoFinTurno3 = new Fl_Counter(380, 175, 100, 25, "Minuto fin");
      CounterMinutoFinTurno3->type(1);
      CounterMinutoFinTurno3->box(FL_FLAT_BOX);
      CounterMinutoFinTurno3->color((Fl_Color)48);
      CounterMinutoFinTurno3->labeltype(FL_NO_LABEL);
      CounterMinutoFinTurno3->labelsize(12);
      CounterMinutoFinTurno3->minimum(0);
      CounterMinutoFinTurno3->maximum(59);
      CounterMinutoFinTurno3->step(1);
      CounterMinutoFinTurno3->textfont(13);
      CounterMinutoFinTurno3->textsize(12);
      CounterMinutoFinTurno3->callback((Fl_Callback*)cb_CounterMinutoFinTurno3);
      CounterMinutoFinTurno3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno3->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[3]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti di fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno3
    { Fl_Output* o = CuadroTextoTurno4 = new Fl_Output(505, 220, 110, 25, "Texto");
      CuadroTextoTurno4->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno4->color((Fl_Color)175);
      CuadroTextoTurno4->labeltype(FL_NO_LABEL);
      CuadroTextoTurno4->labelsize(12);
      CuadroTextoTurno4->textfont(13);
      CuadroTextoTurno4->textsize(12);
      CuadroTextoTurno4->callback((Fl_Callback*)cb_CuadroTextoTurno4);
      CuadroTextoTurno4->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[4]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno4
    { Fl_Counter* o = CounterHoraInicioTurno4 = new Fl_Counter(40, 220, 100, 25, "Hora inicio");
      CounterHoraInicioTurno4->type(1);
      CounterHoraInicioTurno4->box(FL_FLAT_BOX);
      CounterHoraInicioTurno4->color((Fl_Color)48);
      CounterHoraInicioTurno4->labeltype(FL_NO_LABEL);
      CounterHoraInicioTurno4->labelsize(12);
      CounterHoraInicioTurno4->minimum(0);
      CounterHoraInicioTurno4->maximum(23);
      CounterHoraInicioTurno4->step(1);
      CounterHoraInicioTurno4->textfont(13);
      CounterHoraInicioTurno4->textsize(12);
      CounterHoraInicioTurno4->callback((Fl_Callback*)cb_CounterHoraInicioTurno4);
      CounterHoraInicioTurno4->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno4->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[4]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Hora di inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno4
    { Fl_Counter* o = CounterMinutoInicioTurno4 = new Fl_Counter(150, 220, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno4->type(1);
      CounterMinutoInicioTurno4->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno4->color((Fl_Color)48);
      CounterMinutoInicioTurno4->labeltype(FL_NO_LABEL);
      CounterMinutoInicioTurno4->labelsize(12);
      CounterMinutoInicioTurno4->minimum(0);
      CounterMinutoInicioTurno4->maximum(59);
      CounterMinutoInicioTurno4->step(1);
      CounterMinutoInicioTurno4->textfont(13);
      CounterMinutoInicioTurno4->textsize(12);
      CounterMinutoInicioTurno4->callback((Fl_Callback*)cb_CounterMinutoInicioTurno4);
      CounterMinutoInicioTurno4->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno4->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[4]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti di inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno4
    { Fl_Counter* o = CounterHoraFinTurno4 = new Fl_Counter(270, 220, 100, 25, "Hora fin");
      CounterHoraFinTurno4->type(1);
      CounterHoraFinTurno4->box(FL_FLAT_BOX);
      CounterHoraFinTurno4->color((Fl_Color)48);
      CounterHoraFinTurno4->labeltype(FL_NO_LABEL);
      CounterHoraFinTurno4->labelsize(12);
      CounterHoraFinTurno4->minimum(0);
      CounterHoraFinTurno4->maximum(23);
      CounterHoraFinTurno4->step(1);
      CounterHoraFinTurno4->textfont(13);
      CounterHoraFinTurno4->textsize(12);
      CounterHoraFinTurno4->callback((Fl_Callback*)cb_CounterHoraFinTurno4);
      CounterHoraFinTurno4->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno4->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[4]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Hora di fine");break;}
    } // Fl_Counter* CounterHoraFinTurno4
    { Fl_Counter* o = CounterMinutoFinTurno4 = new Fl_Counter(380, 220, 100, 25, "Minuto fin");
      CounterMinutoFinTurno4->type(1);
      CounterMinutoFinTurno4->box(FL_FLAT_BOX);
      CounterMinutoFinTurno4->color((Fl_Color)48);
      CounterMinutoFinTurno4->labeltype(FL_NO_LABEL);
      CounterMinutoFinTurno4->labelsize(12);
      CounterMinutoFinTurno4->minimum(0);
      CounterMinutoFinTurno4->maximum(59);
      CounterMinutoFinTurno4->step(1);
      CounterMinutoFinTurno4->textfont(13);
      CounterMinutoFinTurno4->textsize(12);
      CounterMinutoFinTurno4->callback((Fl_Callback*)cb_CounterMinutoFinTurno4);
      CounterMinutoFinTurno4->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno4->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[4]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti di fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno4
    { Fl_Output* o = CuadroTextoTurno5 = new Fl_Output(505, 265, 110, 25, "Texto");
      CuadroTextoTurno5->box(FL_PLASTIC_THIN_DOWN_BOX);
      CuadroTextoTurno5->color((Fl_Color)175);
      CuadroTextoTurno5->labeltype(FL_NO_LABEL);
      CuadroTextoTurno5->labelsize(12);
      CuadroTextoTurno5->textfont(13);
      CuadroTextoTurno5->textsize(12);
      CuadroTextoTurno5->callback((Fl_Callback*)cb_CuadroTextoTurno5);
      CuadroTextoTurno5->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->value(TextoTurno[5]);
      switch (Idioma) {case ESP:o->label("Texto");break; case ING:o->label("Text");break; case ITA:o->label("Texti");break;}
    } // Fl_Output* CuadroTextoTurno5
    { Fl_Counter* o = CounterHoraInicioTurno5 = new Fl_Counter(40, 265, 100, 25, "Hora inicio");
      CounterHoraInicioTurno5->type(1);
      CounterHoraInicioTurno5->box(FL_FLAT_BOX);
      CounterHoraInicioTurno5->color((Fl_Color)48);
      CounterHoraInicioTurno5->labeltype(FL_NO_LABEL);
      CounterHoraInicioTurno5->labelsize(12);
      CounterHoraInicioTurno5->minimum(0);
      CounterHoraInicioTurno5->maximum(23);
      CounterHoraInicioTurno5->step(1);
      CounterHoraInicioTurno5->textfont(13);
      CounterHoraInicioTurno5->textsize(12);
      CounterHoraInicioTurno5->callback((Fl_Callback*)cb_CounterHoraInicioTurno5);
      CounterHoraInicioTurno5->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraInicioTurno5->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraInicioTurno[5]);
      switch (Idioma) {case ESP:o->label("Hora inicio");break; case ING:o->label("Starting hour");break; case ITA:o->label("Hora di inizio");break;}
    } // Fl_Counter* CounterHoraInicioTurno5
    { Fl_Counter* o = CounterMinutoInicioTurno5 = new Fl_Counter(150, 265, 100, 25, "Minuto inicio");
      CounterMinutoInicioTurno5->type(1);
      CounterMinutoInicioTurno5->box(FL_FLAT_BOX);
      CounterMinutoInicioTurno5->color((Fl_Color)48);
      CounterMinutoInicioTurno5->labeltype(FL_NO_LABEL);
      CounterMinutoInicioTurno5->labelsize(12);
      CounterMinutoInicioTurno5->minimum(0);
      CounterMinutoInicioTurno5->maximum(59);
      CounterMinutoInicioTurno5->step(1);
      CounterMinutoInicioTurno5->textfont(13);
      CounterMinutoInicioTurno5->textsize(12);
      CounterMinutoInicioTurno5->callback((Fl_Callback*)cb_CounterMinutoInicioTurno5);
      CounterMinutoInicioTurno5->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoInicioTurno5->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoInicioTurno[5]);
      switch (Idioma) {case ESP:o->label("Minuto inicio");break; case ING:o->label("Starting minute");break; case ITA:o->label("Minuti di inizio");break;}
    } // Fl_Counter* CounterMinutoInicioTurno5
    { Fl_Counter* o = CounterHoraFinTurno5 = new Fl_Counter(270, 265, 100, 25, "Hora fin");
      CounterHoraFinTurno5->type(1);
      CounterHoraFinTurno5->box(FL_FLAT_BOX);
      CounterHoraFinTurno5->color((Fl_Color)48);
      CounterHoraFinTurno5->labeltype(FL_NO_LABEL);
      CounterHoraFinTurno5->labelsize(12);
      CounterHoraFinTurno5->minimum(0);
      CounterHoraFinTurno5->maximum(23);
      CounterHoraFinTurno5->step(1);
      CounterHoraFinTurno5->textfont(13);
      CounterHoraFinTurno5->textsize(12);
      CounterHoraFinTurno5->callback((Fl_Callback*)cb_CounterHoraFinTurno5);
      CounterHoraFinTurno5->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterHoraFinTurno5->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(HoraFinTurno[5]);
      switch (Idioma) {case ESP:o->label("Hora fin");break; case ING:o->label("Ending hour");break; case ITA:o->label("Hora di fine");break;}
    } // Fl_Counter* CounterHoraFinTurno5
    { Fl_Counter* o = CounterMinutoFinTurno5 = new Fl_Counter(380, 265, 100, 25, "Minuto fin");
      CounterMinutoFinTurno5->type(1);
      CounterMinutoFinTurno5->box(FL_FLAT_BOX);
      CounterMinutoFinTurno5->color((Fl_Color)48);
      CounterMinutoFinTurno5->labeltype(FL_NO_LABEL);
      CounterMinutoFinTurno5->labelsize(12);
      CounterMinutoFinTurno5->minimum(0);
      CounterMinutoFinTurno5->maximum(59);
      CounterMinutoFinTurno5->step(1);
      CounterMinutoFinTurno5->textfont(13);
      CounterMinutoFinTurno5->textsize(12);
      CounterMinutoFinTurno5->callback((Fl_Callback*)cb_CounterMinutoFinTurno5);
      CounterMinutoFinTurno5->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      CounterMinutoFinTurno5->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(MinutoFinTurno[5]);
      switch (Idioma) {case ESP:o->label("Minuto fin");break; case ING:o->label("Ending minute");break; case ITA:o->label("Minuti di fine");break;}
    } // Fl_Counter* CounterMinutoFinTurno5
    { b1 = new Fl_Box(0, 41, 35, 24, "1");
    } // Fl_Box* b1
    { b2 = new Fl_Box(0, 86, 35, 24, "2");
    } // Fl_Box* b2
    { b3 = new Fl_Box(0, 131, 35, 24, "3");
    } // Fl_Box* b3
    { b4 = new Fl_Box(0, 176, 35, 24, "4");
    } // Fl_Box* b4
    { b5 = new Fl_Box(0, 221, 35, 24, "5");
    } // Fl_Box* b5
    { b6 = new Fl_Box(0, 266, 35, 24, "6");
    } // Fl_Box* b6
    VentanaTurnos->set_modal();
    VentanaTurnos->clear_border();
    VentanaTurnos->size_range(800, 600, 800, 600);
    VentanaTurnos->end();
  } // Fl_Double_Window* VentanaTurnos
  return VentanaTurnos;
}

void CargarVentanaTurnos() {
  // Actualiza los campos de los turnos
  CounterHoraInicioTurno0->value(HoraInicioTurno[0]);
  CounterMinutoInicioTurno0->value(MinutoInicioTurno[0]);
  CounterHoraFinTurno0->value(HoraFinTurno[0]);
  CounterMinutoFinTurno0->value(MinutoFinTurno[0]);
  CuadroTextoTurno0->value(TextoTurno[0]);
  
  CounterHoraInicioTurno1->value(HoraInicioTurno[1]);
  CounterMinutoInicioTurno1->value(MinutoInicioTurno[1]);
  CounterHoraFinTurno1->value(HoraFinTurno[1]);
  CounterMinutoFinTurno1->value(MinutoFinTurno[1]);
  CuadroTextoTurno1->value(TextoTurno[1]);
  
  CounterHoraInicioTurno2->value(HoraInicioTurno[2]);
  CounterMinutoInicioTurno2->value(MinutoInicioTurno[2]);
  CounterHoraFinTurno2->value(HoraFinTurno[2]);
  CounterMinutoFinTurno2->value(MinutoFinTurno[2]);
  CuadroTextoTurno2->value(TextoTurno[2]);
  
  CounterHoraInicioTurno3->value(HoraInicioTurno[3]);
  CounterMinutoInicioTurno3->value(MinutoInicioTurno[3]);
  CounterHoraFinTurno3->value(HoraFinTurno[3]);
  CounterMinutoFinTurno3->value(MinutoFinTurno[3]);
  CuadroTextoTurno3->value(TextoTurno[3]);
  
  CounterHoraInicioTurno4->value(HoraInicioTurno[4]);
  CounterMinutoInicioTurno4->value(MinutoInicioTurno[4]);
  CounterHoraFinTurno4->value(HoraFinTurno[4]);
  CounterMinutoFinTurno4->value(MinutoFinTurno[4]);
  CuadroTextoTurno4->value(TextoTurno[4]);
  
  CounterHoraInicioTurno5->value(HoraInicioTurno[5]);
  CounterMinutoInicioTurno5->value(MinutoInicioTurno[5]);
  CounterHoraFinTurno5->value(HoraFinTurno[5]);
  CounterMinutoFinTurno5->value(MinutoFinTurno[5]);
  CuadroTextoTurno5->value(TextoTurno[5]);
  
  // Muestra la nueva ventana		
  VentanaTurnos->show();
}

int main(int argc, char **argv) {
  // Flag para indicar si es configuración avanzada o no
  ConfigAvanzada = OFF;
  
  // Fija la apariencia plastic para todos los widgets
  Fl::scheme("plastic");
  
  // Elimina los recuadros de foco para todos los widgets
  Fl::visible_focus(OFF);
  
  // lee datos de configuración del archivo itaca.conf
  leer_configuracion();
  
  // crea las ventanas
  Make_Window();
  Make_Window_Password();
  Make_Window_Mensaje();
  Make_Window_Turnos();
  
  // y presenta la ventana principal
  VentanaConfiguracion->show();
  return Fl::run();
}
